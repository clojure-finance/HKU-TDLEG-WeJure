{
"version":3,
"file":"module$node_modules$$mui$material$node$styles$cssUtils.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@mui/material/node/styles/cssUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mui$material$node$styles$cssUtils\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignProperty = alignProperty;\nexports.convertLength = convertLength;\nexports.fontGrid = fontGrid;\nexports.getUnit = getUnit;\nexports.isUnitless = isUnitless;\nexports.responsiveProperty = responsiveProperty;\nexports.toUnitless = toUnitless;\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\n\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\n\nfunction alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\n\nfunction fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\n\nfunction responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","getUnit","input","String","match","Object","defineProperty","value","alignProperty","size","grid","sizeBelow","sizeAbove","convertLength","baseFontSize","length","toUnit","fromUnit","pxLength","parseFloat","outputLength","toFixed","fontGrid","pixels","lineHeight","htmlFontSize","isUnitless","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round","toUnitless"]
}
