{"version":3,"sources":["starter/components/registrationPage.cljs"],"mappings":"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","names":["starter.components.registrationPage/emptyName","name","cljs.core._EQ_","cljs.core/deref","cljs.core/count","starter.components.registrationPage/emptyPhoto","photo","starter.components.registrationPage/callback","error","hash","js/window","cljs.core.println","starter.components.registrationPage/submitProfile","contractInstance","details","loading","step","cljs.core/reset!","cljs_ipfs_api.files.add","err","files","js/JSON","obj26884","txHash","cljs.core.swap_BANG_","cljs.core/assoc","p__26887","map__26889","cljs.core/--destructure-map","cljs.core.get","starter.components.registrationPage/registrationPage","reagent.core.atom","profilePic","cljs_ipfs_api.core.init_ipfs","p1__26885#","reagent-mui.material.box/box","reagent-mui.material.typography/typography","reagent-mui.material.text-field/text-field","e","uploaded","reagent-mui.material.icon-button/icon-button","reagent-mui.icons.add-a-photo-sharp/add-a-photo-sharp","reagent-mui.material.button/button","or__4253__auto__","reagent-mui.material.circular-progress/circular-progress","cljs.core/not"],"sourcesContent":["(ns starter.components.registrationPage\n    (:require \n        [reagent.core :as r]\n        [reagent-mui.material.box :refer [box]]\n        [reagent-mui.material.button :refer [button]]\n        [reagent-mui.material.typography :refer [typography]]\n        [reagent-mui.material.text-field :refer [text-field]]\n        [reagent-mui.material.circular-progress :refer [circular-progress]]\n        [reagent-mui.material.icon-button :refer [icon-button]]\n        [reagent-mui.icons.add-a-photo-sharp :refer [add-a-photo-sharp]]\n        [cljs-ipfs-api.core :as icore :refer [init-ipfs]]\n        [cljs-ipfs-api.files :as ifiles]\n    )\n)\n\n(defn emptyName [name]\n    (= (count @name) 0)\n)\n\n(defn emptyPhoto [photo]\n  (nil? @photo)\n)\n\n(defn callback [error hash]\n    (do\n        (set! (. js/window -error) error)\n        (println (str \"error: \" error \" hash: \" hash))\n    )\n)\n\n(defn submitProfile [name photo contractInstance details loading step]\n    (do\n        (reset! loading true)\n        (println (str \"account: \" (:account @details) \" loading: \" @loading))\n        (ifiles/add @photo \n            (fn [err files] \n                (if err \n                    (println (str \"err: \" err)) \n                    (let [hash (. (. js/JSON parse files) -Hash)]\n                        (. ^js (. (. contractInstance -methods) setProfile @name hash) send (js-obj \"from\" (:account @details)) \n                            (fn [error txHash] ;; callback\n                                (if error \n                                    (println error) \n                                    (do \n                                        (swap! details assoc :name @name)\n                                        (swap! details assoc :profileHash hash)\n                                        (reset! loading false)\n                                        (reset! step 2)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)\n\n(defn registrationPage [{:keys [contractInstance details step]}]\n    (let [name (r/atom nil) profilePic (r/atom nil) loading (r/atom false)]\n        (do \n            (init-ipfs {:host \"https://ipfs.infura.io:5001\"})\n            (fn [] \n                [:div\n                    {:style {:height \"100%\" :display \"flex\" :justify-content \"center\" :align-items \"center\"}}\n                    [box \n                        {:sx {:height \"400px\" \n                                :width \"300px\" \n                                :background-color \"#FFFEF7\"\n                                :border-radius \"30px\"\n                                :display \"flex\"\n                                :flex-direction \"column\"\n                                :justify-content \"space-between\"\n                                :padding \"50px 30px\"}}\n\n                        [typography\n                            {:variant \"h5\"\n                            :component \"div\"}\n                            \"Create Your WeJure Profile\"\n                        ]\n\n                        [:div\n                            {:style {:display \"flex\"\n                                    :flex-direction \"column\"}}\n\n                            [typography\n                                {:variant \"h6\"\n                                :component \"div\"}\n                                \"1. Enter a nickname\"\n                            ]\n\n                            [text-field\n                                {:variant \"filled\"\n                                :value @name\n                                :on-change (fn [e] (reset! name (.. e -target -value)))\n                                :error (emptyName name)\n                                :helper-text (if (emptyName name) \"no text entered (20 characters max)\" \" \")\n                                :input-props {:max-length 20}}\n                            ]\n                        ]\n                        \n                        [:div\n                            {:style {:display \"flex\"\n                                    :flex-direction \"column\"}}\n\n                            [typography\n                                {:variant \"h6\"\n                                :component \"div\"}\n                                \"2. Upload a profile picture\"\n                            ]\n\n                            [:label \n                                {:html-for \"upload-image\" :style {:margin \"0 auto\"}}\n                                [:input \n                                {:accept \"image/*\"\n                                :id \"upload-image\"\n                                :type \"file\"\n                                :style {:display \"none\"}\n                                :on-change #(let [uploaded (-> % .-target .-files (aget 0))] (reset! profilePic uploaded))}]\n                                [icon-button \n                                    {:component \"span\"}\n                                    [add-a-photo-sharp]]]\n\n                            [typography\n                                {:variant \"h6\"\n                                :component \"div\"\n                                :sx {:color (if (emptyPhoto profilePic)  \"#d32f2f\" \"#070707\")\n                                :font-size \"12px\"\n                                :font-weight \"500\"\n                                :text-align \"center\"}}\n                                (if (emptyPhoto profilePic) \"no photo uploaded\" (.-name @profilePic))]\n                        ]\n\n                        [:div\n                            {:style {:display \"flex\"\n                                    :flex-direction \"column\"\n                                    :align-items \"center\"}}\n                            [button\n                                {:variant \"contained\"\n                                :disable-elevation true\n                                :disabled (or (emptyName name) (emptyPhoto profilePic) @loading)\n                                :on-click #(submitProfile name profilePic contractInstance details loading step)}\n                                \"Submit\"]\n                            [circular-progress {:sx {:margin \"10px\" :visibility (when (not @loading) \"hidden\")}}]\n                        ]\n                    ]\n                ]  \n            )\n        )\n    )\n)"]}