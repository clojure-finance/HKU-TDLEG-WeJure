{"version":3,"sources":["cljs_ipfs_api/utils.cljs"],"mappings":"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","names":["cljs-ipfs-api.utils/safe-case","case-f","x","G__38703","cljs.core.subs","cljs.core/name","clojure.string/replace","cljs.core/first","cljs.core/Keyword","cljs.core.keyword","cljs-ipfs-api.utils/camel-case","camel-snake-kebab.core/->camelCase","cljs-ipfs-api.utils/kebab-case","camel-snake-kebab.core/->kebab-case","p1__38704#","cljs-ipfs-api.utils/js->cljk","cljs.core.js__GT_clj","cljs-ipfs-api.utils/js->cljkk","cljs.core.comp","cljs.core.partial","camel-snake-kebab.extras/transform-keys","cljs-ipfs-api.utils/cljkk->js","cljs.core/clj->js","cljs-ipfs-api.utils/callback-js->clj","cljs.core/fn?","err","res","and__4251__auto__","G__38705","G__38706","cljs-ipfs-api.utils/args-cljkk->js","args","cljs.core.map","var_args","G__38708","cljs-ipfs-api.utils/js-apply","js/Error","this","method-name","cljs_ipfs_api.utils.js_apply","cljs.core.apply","cljs.core/js-invoke","cljs-ipfs-api.utils/js-prototype-apply","js-obj","cljs-ipfs-api.utils/wrap-callback","f-n","callback","cljs.core.async.impl.channels/ManyToManyChannel","c__29764__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__29765__auto__","switch__29467__auto__","state_38717","state_val_38718","inst_38709","cljs.core/PersistentVector","inst_38710","inst_38711","inst_38712","inst_38713","cljs.core.async.impl.ioc-helpers/put!","inst_38715","cljs.core.async.impl.ioc-helpers/return-chan","statearr-38719","state-machine__29468__auto__","ret-value__29469__auto__","result__29470__auto__","cljs.core/keyword-identical?","ex__29471__auto__","e38720","statearr-38721","cljs.core/seq","statearr-38722","state__29766__auto__","statearr-38723","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","G__38724","G__38725","cljs-ipfs-api.utils/is-blob?","cljs.core._EQ_","js/String","cljs.core/type","p__38726","map__38727","cljs.core/--destructure-map","opts","cljs.core.get","cljs-ipfs-api.utils/web-http-call","url","params","ajax.core.POST","district.format/format-url","cljs.core.merge","response","ajax.core/raw-response-format","temp__5753__auto__","b","cljs.core.filter","G__38728","js/FormData","cljs-ipfs-api.utils/node-http-call","temp__5751__auto__","cb","rm","js/require","fs","on-done","oresp","obody","resp","cljs.core.get_in","G__38729","G__38730","e38731","js/JSON","js/SyntaxError","e","G__38732","G__38733","form","req-options","clojure.string.join","cljs.core.remove","req","out","cljs-ipfs-api.utils/http-call","cljs.core/*target*","cljs-ipfs-api.utils/api-call","inst","ac","G__38734","G__38735","G__38736"],"sourcesContent":["(ns cljs-ipfs-api.utils\n  (:require [ajax.core :as ajax :refer [POST]]\n            [camel-snake-kebab.core :as cs :include-macros true]\n            [camel-snake-kebab.extras :refer [transform-keys]]\n            [cljs.core.async :as async :refer [<! >! chan]]\n            [clojure.string :as string]\n            [district.format :as format])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defn safe-case [case-f]\n  (fn [x]\n    (cond-> (subs (name x) 1)\n      true (string/replace \"_\" \"*\")\n      true case-f\n      true (string/replace \"*\" \"_\")\n      true (->> (str (first (name x))))\n      (keyword? x) keyword)))\n\n(def camel-case (safe-case cs/->camelCase))\n(def kebab-case (safe-case cs/->kebab-case))\n\n(def js->cljk #(js->clj % :keywordize-keys true))\n\n(def js->cljkk\n  \"From JavaScript to Clojure with kekab-cased keywords.\"\n  (comp (partial transform-keys kebab-case) js->cljk))\n\n(def cljkk->js\n  \"From Clojure with kebab-cased keywords to JavaScript.\"\n  (comp clj->js (partial transform-keys camel-case)))\n\n(defn callback-js->clj [x]\n  (if (fn? x)\n    (fn [err res]\n      (when (and res (aget res \"v\"))\n        (aset res \"v\" (aget res \"v\")))                      ;; Prevent weird bug in advanced optimisations\n      (x err (js->cljkk res)))\n    x))\n\n(defn args-cljkk->js [args]\n  (map (comp cljkk->js callback-js->clj) args))\n\n(defn js-apply\n  ([this method-name]\n   (js-apply this method-name nil))\n  ([this method-name args]\n   (if (aget this method-name)\n     (js->cljkk (apply js-invoke this method-name (args-cljkk->js args)))\n     (throw (str \"Method: \" method-name \" was not found in object.\")))))\n\n(defn js-prototype-apply [js-obj method-name args]\n  (js-apply (aget js-obj \"prototype\") method-name args))\n\n(defn wrap-callback [f-n]\n  (let [callback (fn callback [err res]\n                   (if (instance? cljs.core.async.impl.channels/ManyToManyChannel f-n)\n                     (go (>! f-n [(js->cljkk err)\n                                  (js->cljkk res)]))\n                     (if (fn? f-n)\n                       (f-n (js->cljkk err)\n                            (js->cljkk res))\n                       f-n)))]\n    callback))\n\n(defn is-blob? [x]\n  (not (= js/String (type x))))\n\n(defn web-http-call [url args {:keys [:opts :callback] :as params}]\n  (POST (format/format-url url opts)\n      (merge {:handler (fn [response] (callback nil response))\n              :error-handler (fn [err] (callback err nil))\n              :response-format (ajax/raw-response-format)}\n             (when-let [b (first (filter is-blob? args))]\n               {:body (doto\n                          (js/FormData.)\n                        (.append \"file\" b))}))))\n\n(defn node-http-call [url args params]\n  (if-let [cb (:callback params)]\n    (let [rm (js/require \"request\")\n          fs (js/require \"fs\")\n          on-done (fn [err oresp obody]\n                    (let [err (js->cljkk err)\n                          resp (js->cljkk oresp)]\n\n                      (cond\n                        err\n                        (cb err nil)\n\n                        (= (.-statusCode resp) 200)\n                        (if (get-in params [:opts :binary?])\n                          ;; if :binary? option is set, then obody will be a Buffer with binary data\n                          ;; so just return it as it is\n                          (cb nil obody)\n\n                          ;; response body is going to be json\n                          (cb nil\n                             (try\n                               (.parse js/JSON (js->cljkk obody))\n                               (catch js/SyntaxError e\n                                 (js->cljkk obody)))))\n\n                        :else (cb (.-statusMessage resp) nil))))\n          form (when-let [b (first (filter is-blob? args))]\n                 {:formData\n                  {:file b}})\n          req-options (clj->js (merge {:url url\n                                       :qs (merge {:arg (clojure.string/join \" \" (remove is-blob? args))}\n                                                  (get-in params [:opts :req-opts]))}\n                                      ;; if we have :binary? option lets set encoding nil\n                                      ;; nodejs doc says that a post with encoding nil will return\n                                      ;; the response body in a Buffer instead of a string\n                                      (when (get-in params [:opts :binary?]) {:encoding nil})\n                                      form))\n          req (.post rm req-options on-done)]\n      (when-let [out (get-in params [:opts :pipe-to])]\n        (.pipe req out)))))\n\n(def http-call\n  (if (= cljs.core/*target* \"nodejs\")\n    node-http-call\n    web-http-call))\n\n(defn api-call [inst ac args params]\n  (http-call (str (:host inst)\n                  (:endpoint inst) \"/\" ac)\n             args\n             (merge inst\n                    {:opts (:options params)\n                     :callback (:callback params)})))\n"]}