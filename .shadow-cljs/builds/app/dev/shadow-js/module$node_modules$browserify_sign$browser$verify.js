["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/browserify-sign/browser/verify.js"],"~:js","shadow$provide.module$node_modules$browserify_sign$browser$verify=function(global,require,module,exports){function checkValue(b,q){if(0>=b.cmpn(0))throw Error(\"invalid sig\");if(b.cmp(q)>=q)throw Error(\"invalid sig\");}var Buffer=require(\"module$node_modules$safe_buffer$index\").Buffer,BN=require(\"module$node_modules$browserify_sign$node_modules$bn_js$lib$bn\"),EC=require(\"module$node_modules$elliptic$lib$elliptic\").ec,parseKeys=require(\"module$node_modules$parse_asn1$index\"),curves=require(\"module$node_modules$browserify_sign$browser$curves_json\");\nmodule.exports=function(sig,hash,key,signType,tag){key=parseKeys(key);if(\"ec\"===key.type){if(\"ecdsa\"!==signType&&\"ecdsa/rsa\"!==signType)throw Error(\"wrong public key type\");signType=curves[key.data.algorithm.curve.join(\".\")];if(!signType)throw Error(\"unknown curve \"+key.data.algorithm.curve.join(\".\"));return(new EC(signType)).verify(hash,sig,key.data.subjectPrivateKey.data)}if(\"dsa\"===key.type){if(\"dsa\"!==signType)throw Error(\"wrong public key type\");signType=key.data.p;tag=key.data.q;var g=key.data.g;\nkey=key.data.pub_key;var unpacked=parseKeys.signature.decode(sig,\"der\");sig=unpacked.s;unpacked=unpacked.r;checkValue(sig,tag);checkValue(unpacked,tag);var montp=BN.mont(signType);sig=sig.invm(tag);return 0===g.toRed(montp).redPow((new BN(hash)).mul(sig).mod(tag)).fromRed().mul(key.toRed(montp).redPow(unpacked.mul(sig).mod(tag)).fromRed()).mod(signType).mod(tag).cmp(unpacked)}if(\"rsa\"!==signType&&\"ecdsa/rsa\"!==signType)throw Error(\"wrong public key type\");hash=Buffer.concat([tag,hash]);tag=key.modulus.byteLength();\nsignType=[1];for(g=0;hash.length+signType.length+2<tag;)signType.push(255),g++;signType.push(0);for(unpacked=-1;++unpacked<hash.length;)signType.push(hash[unpacked]);signType=Buffer.from(signType);hash=BN.mont(key.modulus);sig=(new BN(sig)).toRed(hash);sig=sig.redPow(new BN(key.publicExponent));sig=Buffer.from(sig.fromRed().toArray());key=8>g?1:0;tag=Math.min(sig.length,signType.length);sig.length!==signType.length&&(key=1);for(unpacked=-1;++unpacked<tag;)key|=sig[unpacked]^signType[unpacked];return 0===\nkey}}","~:source","shadow$provide[\"module$node_modules$browserify_sign$browser$verify\"] = function(global,require,module,exports) {\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar Buffer = require('safe-buffer').Buffer\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\nvar parseKeys = require('parse-asn1')\nvar curves = require('./curves.json')\n\nfunction verify (sig, hash, key, signType, tag) {\n  var pub = parseKeys(key)\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n    return ecVerify(sig, hash, pub)\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') throw new Error('wrong public key type')\n    return dsaVerify(sig, hash, pub)\n  } else {\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n  }\n  hash = Buffer.concat([tag, hash])\n  var len = pub.modulus.byteLength()\n  var pad = [1]\n  var padNum = 0\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff)\n    padNum++\n  }\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) {\n    pad.push(hash[i])\n  }\n  pad = Buffer.from(pad)\n  var red = BN.mont(pub.modulus)\n  sig = new BN(sig).toRed(red)\n\n  sig = sig.redPow(new BN(pub.publicExponent))\n  sig = Buffer.from(sig.fromRed().toArray())\n  var out = padNum < 8 ? 1 : 0\n  len = Math.min(sig.length, pad.length)\n  if (sig.length !== pad.length) out = 1\n\n  i = -1\n  while (++i < len) out |= sig[i] ^ pad[i]\n  return out === 0\n}\n\nfunction ecVerify (sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\n\n  var curve = new EC(curveId)\n  var pubkey = pub.data.subjectPrivateKey.data\n\n  return curve.verify(hash, sig, pubkey)\n}\n\nfunction dsaVerify (sig, hash, pub) {\n  var p = pub.data.p\n  var q = pub.data.q\n  var g = pub.data.g\n  var y = pub.data.pub_key\n  var unpacked = parseKeys.signature.decode(sig, 'der')\n  var s = unpacked.s\n  var r = unpacked.r\n  checkValue(s, q)\n  checkValue(r, q)\n  var montp = BN.mont(p)\n  var w = s.invm(q)\n  var v = g.toRed(montp)\n    .redPow(new BN(hash).mul(w).mod(q))\n    .fromRed()\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\n    .mod(p)\n    .mod(q)\n  return v.cmp(r) === 0\n}\n\nfunction checkValue (b, q) {\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\n}\n\nmodule.exports = verify\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$browserify_sign$browser$curves_json","~$module$node_modules$browserify_sign$node_modules$bn_js$lib$bn","~$module$node_modules$elliptic$lib$elliptic","~$shadow.js","~$module$node_modules$safe_buffer$index","~$module$node_modules$parse_asn1$index"]],"~:properties",["^5",[]],"~:compiled-at",1644840880006,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$browserify_sign$browser$verify.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/browserify-sign/browser/verify.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$browserify_sign$browser$verify\\\"] = function(global,require,module,exports) {\\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\\nvar Buffer = require('safe-buffer').Buffer\\nvar BN = require('bn.js')\\nvar EC = require('elliptic').ec\\nvar parseKeys = require('parse-asn1')\\nvar curves = require('./curves.json')\\n\\nfunction verify (sig, hash, key, signType, tag) {\\n  var pub = parseKeys(key)\\n  if (pub.type === 'ec') {\\n    // rsa keys can be interpreted as ecdsa ones in openssl\\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\\n    return ecVerify(sig, hash, pub)\\n  } else if (pub.type === 'dsa') {\\n    if (signType !== 'dsa') throw new Error('wrong public key type')\\n    return dsaVerify(sig, hash, pub)\\n  } else {\\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\\n  }\\n  hash = Buffer.concat([tag, hash])\\n  var len = pub.modulus.byteLength()\\n  var pad = [1]\\n  var padNum = 0\\n  while (hash.length + pad.length + 2 < len) {\\n    pad.push(0xff)\\n    padNum++\\n  }\\n  pad.push(0x00)\\n  var i = -1\\n  while (++i < hash.length) {\\n    pad.push(hash[i])\\n  }\\n  pad = Buffer.from(pad)\\n  var red = BN.mont(pub.modulus)\\n  sig = new BN(sig).toRed(red)\\n\\n  sig = sig.redPow(new BN(pub.publicExponent))\\n  sig = Buffer.from(sig.fromRed().toArray())\\n  var out = padNum < 8 ? 1 : 0\\n  len = Math.min(sig.length, pad.length)\\n  if (sig.length !== pad.length) out = 1\\n\\n  i = -1\\n  while (++i < len) out |= sig[i] ^ pad[i]\\n  return out === 0\\n}\\n\\nfunction ecVerify (sig, hash, pub) {\\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\\n\\n  var curve = new EC(curveId)\\n  var pubkey = pub.data.subjectPrivateKey.data\\n\\n  return curve.verify(hash, sig, pubkey)\\n}\\n\\nfunction dsaVerify (sig, hash, pub) {\\n  var p = pub.data.p\\n  var q = pub.data.q\\n  var g = pub.data.g\\n  var y = pub.data.pub_key\\n  var unpacked = parseKeys.signature.decode(sig, 'der')\\n  var s = unpacked.s\\n  var r = unpacked.r\\n  checkValue(s, q)\\n  checkValue(r, q)\\n  var montp = BN.mont(p)\\n  var w = s.invm(q)\\n  var v = g.toRed(montp)\\n    .redPow(new BN(hash).mul(w).mod(q))\\n    .fromRed()\\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\\n    .mod(p)\\n    .mod(q)\\n  return v.cmp(r) === 0\\n}\\n\\nfunction checkValue (b, q) {\\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\\n}\\n\\nmodule.exports = verify\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"checkValue\",\"b\",\"q\",\"cmpn\",\"Error\",\"cmp\",\"Buffer\",\"BN\",\"EC\",\"ec\",\"parseKeys\",\"curves\",\"verify\",\"sig\",\"hash\",\"key\",\"signType\",\"tag\",\"pub\",\"type\",\"curveId\",\"data\",\"algorithm\",\"curve\",\"join\",\"subjectPrivateKey\",\"p\",\"g\",\"y\",\"pub_key\",\"unpacked\",\"signature\",\"decode\",\"s\",\"r\",\"montp\",\"mont\",\"w\",\"invm\",\"toRed\",\"redPow\",\"mul\",\"mod\",\"fromRed\",\"v\",\"concat\",\"len\",\"modulus\",\"byteLength\",\"pad\",\"padNum\",\"length\",\"push\",\"i\",\"from\",\"red\",\"publicExponent\",\"toArray\",\"out\",\"Math\",\"min\"]\n}\n"]