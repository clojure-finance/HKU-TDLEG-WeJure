["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/safer-buffer/safer.js"],"~:js","shadow$provide.module$node_modules$safer_buffer$safer=function(global,require,module,exports){global=require(\"module$node_modules$process$browser\");\"use strict\";exports=require(\"module$node_modules$buffer$index\");var Buffer=exports.Buffer;require={};for(var key in exports)exports.hasOwnProperty(key)&&\"SlowBuffer\"!==key&&\"Buffer\"!==key&&(require[key]=exports[key]);exports=require.Buffer={};for(key in Buffer)Buffer.hasOwnProperty(key)&&\"allocUnsafe\"!==key&&\"allocUnsafeSlow\"!==key&&(exports[key]=Buffer[key]);\nrequire.Buffer.prototype=Buffer.prototype;exports.from&&exports.from!==Uint8Array.from||(exports.from=function(value,encodingOrOffset,length){if(\"number\"===typeof value)throw new TypeError('The \"value\" argument must not be of type number. Received type '+typeof value);if(value&&\"undefined\"===typeof value.length)throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof value);return Buffer(value,encodingOrOffset,length)});\nexports.alloc||(exports.alloc=function(size,fill,encoding){if(\"number\"!==typeof size)throw new TypeError('The \"size\" argument must be of type number. Received type '+typeof size);if(0>size||2147483648<=size)throw new RangeError('The value \"'+size+'\" is invalid for option \"size\"');size=Buffer(size);fill&&0!==fill.length?\"string\"===typeof encoding?size.fill(fill,encoding):size.fill(fill):size.fill(0);return size});if(!require.kStringMaxLength)try{require.kStringMaxLength=global.binding(\"buffer\").kStringMaxLength}catch(e){}require.constants||\n(require.constants={MAX_LENGTH:require.kMaxLength},require.kStringMaxLength&&(require.constants.MAX_STRING_LENGTH=require.kStringMaxLength));module.exports=require}","~:source","shadow$provide[\"module$node_modules$safer_buffer$safer\"] = function(global,require,module,exports) {\nvar process = require('process');\n/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$process$browser","~$shadow.js","~$module$node_modules$buffer$index"]],"~:properties",["^5",["constants","kStringMaxLength","prototype","MAX_STRING_LENGTH","Buffer","alloc","from","MAX_LENGTH"]],"~:compiled-at",1644840879996,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$safer_buffer$safer.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC/FC,MAAAA,CAAUH,OAAA,CAAQ,qCAAR,CAGd,aAEII,QAAAA,CAASJ,OAAA,CAAQ,kCAAR,CACb,KAAIK,OAASD,OAAOC,CAAAA,MAEhBC,QAAAA,CAAQ,EAIZ,KAFAC,IAAIA,GAEJ,GAAYH,QAAZ,CACOA,OAAOI,CAAAA,cAAP,CAAsBD,GAAtB,CAAL,EACY,YADZ,GACIA,GADJ,EACoC,QADpC,GAC4BA,GAD5B,GAEAD,OAAA,CAAMC,GAAN,CAFA,CAEaH,OAAA,CAAOG,GAAP,CAFb,CAKEE,QAAAA,CAAQH,OAAMD,CAAAA,MAAdI,CAAuB,EAC3B,KAAKF,GAAL,GAAYF,OAAZ,CACOA,MAAOG,CAAAA,cAAP,CAAsBD,GAAtB,CAAL,EACY,aADZ,GACIA,GADJ,EACqC,iBADrC,GAC6BA,GAD7B,GAEAE,OAAA,CAAMF,GAAN,CAFA,CAEaF,MAAA,CAAOE,GAAP,CAFb,CAKFD;OAAMD,CAAAA,MAAOK,CAAAA,SAAb,CAAyBL,MAAOK,CAAAA,SAE3BD,QAAME,CAAAA,IAAX,EAAmBF,OAAME,CAAAA,IAAzB,GAAkCC,UAAWD,CAAAA,IAA7C,GACEF,OAAME,CAAAA,IADR,CACeE,QAAS,CAACC,KAAD,CAAQC,gBAAR,CAA0BC,MAA1B,CAAkC,CACtD,GAAqB,QAArB,GAAI,MAAOF,MAAX,CACE,KAAM,KAAIG,SAAJ,CAAc,iEAAd,CAAkF,MAAOH,MAAzF,CAAN,CAEF,GAAIA,KAAJ,EAAqC,WAArC,GAAa,MAAOA,MAAME,CAAAA,MAA1B,CACE,KAAM,KAAIC,SAAJ,CAAc,iHAAd,CAAkI,MAAOH,MAAzI,CAAN,CAEF,MAAOT,OAAA,CAAOS,KAAP,CAAcC,gBAAd,CAAgCC,MAAhC,CAP+C,CAD1D,CAYKP;OAAMS,CAAAA,KAAX,GACET,OAAMS,CAAAA,KADR,CACgBC,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAaC,QAAb,CAAuB,CAC5C,GAAoB,QAApB,GAAI,MAAOF,KAAX,CACE,KAAM,KAAIH,SAAJ,CAAc,4DAAd,CAA6E,MAAOG,KAApF,CAAN,CAEF,GAAW,CAAX,CAAIA,IAAJ,EAAwB,UAAxB,EAAgBA,IAAhB,CACE,KAAM,KAAIG,UAAJ,CAAe,aAAf,CAA+BH,IAA/B,CAAsC,gCAAtC,CAAN,CAEEI,IAAAA,CAAMnB,MAAA,CAAOe,IAAP,CACLC,KAAL,EAA6B,CAA7B,GAAaA,IAAKL,CAAAA,MAAlB,CAE+B,QAAxB,GAAI,MAAOM,SAAX,CACLE,IAAIH,CAAAA,IAAJ,CAASA,IAAT,CAAeC,QAAf,CADK,CAGLE,IAAIH,CAAAA,IAAJ,CAASA,IAAT,CALF,CACEG,IAAIH,CAAAA,IAAJ,CAAS,CAAT,CAMF,OAAOG,KAfqC,CADhD,CAoBA,IAAI,CAAClB,OAAMmB,CAAAA,gBAAX,CACE,GAAI,CACFnB,OAAMmB,CAAAA,gBAAN,CAAyBtB,MAAQuB,CAAAA,OAAR,CAAgB,QAAhB,CAA0BD,CAAAA,gBADjD,CAEF,MAAOE,CAAP,CAAU,EAMTrB,OAAMsB,CAAAA,SAAX;CACEtB,OAAMsB,CAAAA,SAGN,CAHkB,CAChBC,WAAYvB,OAAMwB,CAAAA,UADF,CAGlB,CAAIxB,OAAMmB,CAAAA,gBAAV,GACEnB,OAAMsB,CAAAA,SAAUG,CAAAA,iBADlB,CACsCzB,OAAMmB,CAAAA,gBAD5C,CAJF,CASAxB,OAAOC,CAAAA,OAAP,CAAiBI,OA9EkF;\",\n\"sources\":[\"node_modules/safer-buffer/safer.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$safer_buffer$safer\\\"] = function(global,require,module,exports) {\\nvar process = require('process');\\n/* eslint-disable node/no-deprecated-api */\\n\\n'use strict'\\n\\nvar buffer = require('buffer')\\nvar Buffer = buffer.Buffer\\n\\nvar safer = {}\\n\\nvar key\\n\\nfor (key in buffer) {\\n  if (!buffer.hasOwnProperty(key)) continue\\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\\n  safer[key] = buffer[key]\\n}\\n\\nvar Safer = safer.Buffer = {}\\nfor (key in Buffer) {\\n  if (!Buffer.hasOwnProperty(key)) continue\\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\\n  Safer[key] = Buffer[key]\\n}\\n\\nsafer.Buffer.prototype = Buffer.prototype\\n\\nif (!Safer.from || Safer.from === Uint8Array.from) {\\n  Safer.from = function (value, encodingOrOffset, length) {\\n    if (typeof value === 'number') {\\n      throw new TypeError('The \\\"value\\\" argument must not be of type number. Received type ' + typeof value)\\n    }\\n    if (value && typeof value.length === 'undefined') {\\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\\n    }\\n    return Buffer(value, encodingOrOffset, length)\\n  }\\n}\\n\\nif (!Safer.alloc) {\\n  Safer.alloc = function (size, fill, encoding) {\\n    if (typeof size !== 'number') {\\n      throw new TypeError('The \\\"size\\\" argument must be of type number. Received type ' + typeof size)\\n    }\\n    if (size < 0 || size >= 2 * (1 << 30)) {\\n      throw new RangeError('The value \\\"' + size + '\\\" is invalid for option \\\"size\\\"')\\n    }\\n    var buf = Buffer(size)\\n    if (!fill || fill.length === 0) {\\n      buf.fill(0)\\n    } else if (typeof encoding === 'string') {\\n      buf.fill(fill, encoding)\\n    } else {\\n      buf.fill(fill)\\n    }\\n    return buf\\n  }\\n}\\n\\nif (!safer.kStringMaxLength) {\\n  try {\\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\\n  } catch (e) {\\n    // we can't determine kStringMaxLength in environments where process.binding\\n    // is unsupported, so let's not set it\\n  }\\n}\\n\\nif (!safer.constants) {\\n  safer.constants = {\\n    MAX_LENGTH: safer.kMaxLength\\n  }\\n  if (safer.kStringMaxLength) {\\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\\n  }\\n}\\n\\nmodule.exports = safer\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"process\",\"buffer\",\"Buffer\",\"safer\",\"key\",\"hasOwnProperty\",\"Safer\",\"prototype\",\"from\",\"Uint8Array\",\"Safer.from\",\"value\",\"encodingOrOffset\",\"length\",\"TypeError\",\"alloc\",\"Safer.alloc\",\"size\",\"fill\",\"encoding\",\"RangeError\",\"buf\",\"kStringMaxLength\",\"binding\",\"e\",\"constants\",\"MAX_LENGTH\",\"kMaxLength\",\"MAX_STRING_LENGTH\"]\n}\n"]