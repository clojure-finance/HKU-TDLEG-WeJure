["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/util-deprecate/browser.js"],"~:js","shadow$provide.module$node_modules$util_deprecate$browser=function(global,require,module,exports){function config(name){try{if(!global.localStorage)return!1}catch(_){return!1}name=global.localStorage[name];return null==name?!1:\"true\"===String(name).toLowerCase()}module.exports=function(fn,msg){if(config(\"noDeprecation\"))return fn;var warned=!1;return function(){if(!warned){if(config(\"throwDeprecation\"))throw Error(msg);config(\"traceDeprecation\")?console.trace(msg):console.warn(msg);warned=!0}return fn.apply(this,\narguments)}}}","~:source","shadow$provide[\"module$node_modules$util_deprecate$browser\"] = function(global,require,module,exports) {\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1644840879859,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$util_deprecate$browser.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyDvGC,QAASA,OAAO,CAACC,IAAD,CAAO,CAErB,GAAI,CACF,GAAI,CAACL,MAAOM,CAAAA,YAAZ,CAA0B,MAAO,CAAA,CAD/B,CAEF,MAAOC,CAAP,CAAU,CACV,MAAO,CAAA,CADG,CAGRC,IAAAA,CAAMR,MAAOM,CAAAA,YAAP,CAAoBD,IAApB,CACV,OAAI,KAAJ,EAAYG,IAAZ,CAAwB,CAAA,CAAxB,CACqC,MADrC,GACOC,MAAA,CAAOD,IAAP,CAAYE,CAAAA,WAAZ,EATc,CAnDvBR,MAAOC,CAAAA,OAAP,CAoBAQ,QAAmB,CAACC,EAAD,CAAKC,GAAL,CAAU,CAC3B,GAAIT,MAAA,CAAO,eAAP,CAAJ,CACE,MAAOQ,GAGT,KAAIE,OAAS,CAAA,CAeb,OAdAC,SAAmB,EAAG,CACpB,GAAI,CAACD,MAAL,CAAa,CACX,GAAIV,MAAA,CAAO,kBAAP,CAAJ,CACE,KAAUY,MAAJ,CAAUH,GAAV,CAAN,CACST,MAAA,CAAO,kBAAP,CAAJ,CACLa,OAAQC,CAAAA,KAAR,CAAcL,GAAd,CADK,CAGLI,OAAQE,CAAAA,IAAR,CAAaN,GAAb,CAEFC,OAAA,CAAS,CAAA,CARE,CAUb,MAAOF,GAAGQ,CAAAA,KAAH,CAAS,IAAT;AAAeC,SAAf,CAXa,CANK,CA1B0E;\",\n\"sources\":[\"node_modules/util-deprecate/browser.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$util_deprecate$browser\\\"] = function(global,require,module,exports) {\\n\\n/**\\n * Module exports.\\n */\\n\\nmodule.exports = deprecate;\\n\\n/**\\n * Mark that a method should not be used.\\n * Returns a modified function which warns once by default.\\n *\\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\\n *\\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\\n * will throw an Error when invoked.\\n *\\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\\n * will invoke `console.trace()` instead of `console.error()`.\\n *\\n * @param {Function} fn - the function to deprecate\\n * @param {String} msg - the string to print to the console when `fn` is invoked\\n * @returns {Function} a new \\\"deprecated\\\" version of `fn`\\n * @api public\\n */\\n\\nfunction deprecate (fn, msg) {\\n  if (config('noDeprecation')) {\\n    return fn;\\n  }\\n\\n  var warned = false;\\n  function deprecated() {\\n    if (!warned) {\\n      if (config('throwDeprecation')) {\\n        throw new Error(msg);\\n      } else if (config('traceDeprecation')) {\\n        console.trace(msg);\\n      } else {\\n        console.warn(msg);\\n      }\\n      warned = true;\\n    }\\n    return fn.apply(this, arguments);\\n  }\\n\\n  return deprecated;\\n}\\n\\n/**\\n * Checks `localStorage` for boolean values for the given `name`.\\n *\\n * @param {String} name\\n * @returns {Boolean}\\n * @api private\\n */\\n\\nfunction config (name) {\\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\\n  try {\\n    if (!global.localStorage) return false;\\n  } catch (_) {\\n    return false;\\n  }\\n  var val = global.localStorage[name];\\n  if (null == val) return false;\\n  return String(val).toLowerCase() === 'true';\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"config\",\"name\",\"localStorage\",\"_\",\"val\",\"String\",\"toLowerCase\",\"deprecate\",\"fn\",\"msg\",\"warned\",\"deprecated\",\"Error\",\"console\",\"trace\",\"warn\",\"apply\",\"arguments\"]\n}\n"]