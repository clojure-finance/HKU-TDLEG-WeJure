["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/browserify-aes/modes/cfb8.js"],"~:js","shadow$provide.module$node_modules$browserify_aes$modes$cfb8=function(global,require,module,exports){var Buffer=require(\"module$node_modules$safe_buffer$index\").Buffer;exports.encrypt=function(self$jscomp$0,chunk,decrypt$jscomp$0){for(var len=chunk.length,out=Buffer.allocUnsafe(len),i=-1;++i<len;){var JSCompiler_temp_const=i,self=self$jscomp$0,byteParam=chunk[i],decrypt=decrypt$jscomp$0,out$jscomp$0=self._cipher.encryptBlock(self._prev)[0]^byteParam;self._prev=Buffer.concat([self._prev.slice(1),Buffer.from([decrypt?\nbyteParam:out$jscomp$0])]);out[JSCompiler_temp_const]=out$jscomp$0}return out}}","~:source","shadow$provide[\"module$node_modules$browserify_aes$modes$cfb8\"] = function(global,require,module,exports) {\nvar Buffer = require('safe-buffer').Buffer\n\nfunction encryptByte (self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev)\n  var out = pad[0] ^ byteParam\n\n  self._prev = Buffer.concat([\n    self._prev.slice(1),\n    Buffer.from([decrypt ? byteParam : out])\n  ])\n\n  return out\n}\n\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length\n  var out = Buffer.allocUnsafe(len)\n  var i = -1\n\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt)\n  }\n\n  return out\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$safe_buffer$index"]],"~:properties",["^5",["encrypt","_prev"]],"~:compiled-at",1644840879909,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$browserify_aes$modes$cfb8.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,6CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC1G,IAAIC,OAASH,OAAA,CAAQ,uCAAR,CAAuBG,CAAAA,MAcpCD,QAAQE,CAAAA,OAAR,CAAkBC,QAAS,CAACC,aAAD,CAAOC,KAAP,CAAcC,gBAAd,CAAuB,CAKhD,IAJA,IAAIC,IAAMF,KAAMG,CAAAA,MAAhB,CACIC,IAAMR,MAAOS,CAAAA,WAAP,CAAmBH,GAAnB,CADV,CAEII,EAAI,CAAC,CAET,CAAO,EAAEA,CAAT,CAAaJ,GAAb,CAAA,CAAkB,CACZI,IAAAA,sBAAAA,CAAAA,CAAiBP,KAAAA,aAAjBO,CAAuB,UAAAN,KAAA,CAAMM,CAAN,CAAvBA,CAAiCL,QAAAA,gBAAjCK,CAhBFF,aADML,IAAKQ,CAAAA,OAAQC,CAAAA,YAAbC,CAA0BV,IAAKW,CAAAA,KAA/BD,CACA,CAAI,CAAJ,CAANL,CAAeO,SAEnBZ,KAAKW,CAAAA,KAAL,CAAad,MAAOgB,CAAAA,MAAP,CAAc,CACzBb,IAAKW,CAAAA,KAAMG,CAAAA,KAAX,CAAiB,CAAjB,CADyB,CAEzBjB,MAAOkB,CAAAA,IAAP,CAAY,CAACb,OAAA;AAAUU,SAAV,CAAsBP,YAAvB,CAAZ,CAFyB,CAAd,CAcXA,IAAA,CAAIE,qBAAJ,CAAA,CATKF,YAQW,CAIlB,MAAOA,IATyC,CAfwD;\",\n\"sources\":[\"node_modules/browserify-aes/modes/cfb8.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$browserify_aes$modes$cfb8\\\"] = function(global,require,module,exports) {\\nvar Buffer = require('safe-buffer').Buffer\\n\\nfunction encryptByte (self, byteParam, decrypt) {\\n  var pad = self._cipher.encryptBlock(self._prev)\\n  var out = pad[0] ^ byteParam\\n\\n  self._prev = Buffer.concat([\\n    self._prev.slice(1),\\n    Buffer.from([decrypt ? byteParam : out])\\n  ])\\n\\n  return out\\n}\\n\\nexports.encrypt = function (self, chunk, decrypt) {\\n  var len = chunk.length\\n  var out = Buffer.allocUnsafe(len)\\n  var i = -1\\n\\n  while (++i < len) {\\n    out[i] = encryptByte(self, chunk[i], decrypt)\\n  }\\n\\n  return out\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Buffer\",\"encrypt\",\"exports.encrypt\",\"self\",\"chunk\",\"decrypt\",\"len\",\"length\",\"out\",\"allocUnsafe\",\"i\",\"_cipher\",\"encryptBlock\",\"pad\",\"_prev\",\"byteParam\",\"concat\",\"slice\",\"from\"]\n}\n"]