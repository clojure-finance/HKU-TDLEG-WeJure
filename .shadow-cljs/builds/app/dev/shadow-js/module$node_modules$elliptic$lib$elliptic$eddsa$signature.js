["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/elliptic/lib/elliptic/eddsa/signature.js"],"~:js","shadow$provide.module$node_modules$elliptic$lib$elliptic$eddsa$signature=function(global,require,module,exports){function Signature(eddsa,sig){this.eddsa=eddsa;\"object\"!==typeof sig&&(sig=parseBytes(sig));Array.isArray(sig)&&(sig={R:sig.slice(0,eddsa.encodingLength),S:sig.slice(eddsa.encodingLength)});assert(sig.R&&sig.S,\"Signature without R or S\");eddsa.isPoint(sig.R)&&(this._R=sig.R);sig.S instanceof BN&&(this._S=sig.S);this._Rencoded=Array.isArray(sig.R)?sig.R:sig.Rencoded;this._Sencoded=Array.isArray(sig.S)?\nsig.S:sig.Sencoded}var BN=require(\"module$node_modules$bn_DOT_js$lib$bn\"),utils=require(\"module$node_modules$elliptic$lib$elliptic$utils\"),assert=utils.assert;global=utils.cachedProperty;var parseBytes=utils.parseBytes;global(Signature,\"S\",function(){return this.eddsa.decodeInt(this.Sencoded())});global(Signature,\"R\",function(){return this.eddsa.decodePoint(this.Rencoded())});global(Signature,\"Rencoded\",function(){return this.eddsa.encodePoint(this.R())});global(Signature,\"Sencoded\",function(){return this.eddsa.encodeInt(this.S())});\nSignature.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())};Signature.prototype.toHex=function(){return utils.encode(this.toBytes(),\"hex\").toUpperCase()};module.exports=Signature}","~:source","shadow$provide[\"module$node_modules$elliptic$lib$elliptic$eddsa$signature\"] = function(global,require,module,exports) {\n'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength),\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$elliptic$lib$elliptic$utils","~$module$node_modules$bn_DOT_js$lib$bn"]],"~:properties",["^5",["_Rencoded","eddsa","S","_S","R","toHex","toBytes","_R","_Sencoded"]],"~:compiled-at",1644840880023,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$elliptic$lib$elliptic$eddsa$signature.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBtHC,QAASA,UAAS,CAACC,KAAD,CAAQC,GAAR,CAAa,CAC7B,IAAKD,CAAAA,KAAL,CAAaA,KAEM,SAAnB,GAAI,MAAOC,IAAX,GACEA,GADF,CACQC,UAAA,CAAWD,GAAX,CADR,CAGIE,MAAMC,CAAAA,OAAN,CAAcH,GAAd,CAAJ,GACEA,GADF,CACQ,CACJI,EAAGJ,GAAIK,CAAAA,KAAJ,CAAU,CAAV,CAAaN,KAAMO,CAAAA,cAAnB,CADC,CAEJC,EAAGP,GAAIK,CAAAA,KAAJ,CAAUN,KAAMO,CAAAA,cAAhB,CAFC,CADR,CAOAE,OAAA,CAAOR,GAAII,CAAAA,CAAX,EAAgBJ,GAAIO,CAAAA,CAApB,CAAuB,0BAAvB,CAEIR,MAAMU,CAAAA,OAAN,CAAcT,GAAII,CAAAA,CAAlB,CAAJ,GACE,IAAKM,CAAAA,EADP,CACYV,GAAII,CAAAA,CADhB,CAEIJ,IAAIO,CAAAA,CAAR,WAAqBI,GAArB,GACE,IAAKC,CAAAA,EADP,CACYZ,GAAIO,CAAAA,CADhB,CAGA,KAAKM,CAAAA,SAAL,CAAiBX,KAAMC,CAAAA,OAAN,CAAcH,GAAII,CAAAA,CAAlB,CAAA,CAAuBJ,GAAII,CAAAA,CAA3B,CAA+BJ,GAAIc,CAAAA,QACpD,KAAKC,CAAAA,SAAL,CAAiBb,KAAMC,CAAAA,OAAN,CAAcH,GAAIO,CAAAA,CAAlB,CAAA;AAAuBP,GAAIO,CAAAA,CAA3B,CAA+BP,GAAIgB,CAAAA,QArBvB,CAd/B,IAAIL,GAAKhB,OAAA,CAAQ,sCAAR,CAAT,CACIsB,MAAQtB,OAAA,CAAQ,iDAAR,CADZ,CAEIa,OAASS,KAAMT,CAAAA,MACfU,OAAAA,CAAiBD,KAAMC,CAAAA,cAC3B,KAAIjB,WAAagB,KAAMhB,CAAAA,UAkCvBiB,OAAA,CAAepB,SAAf,CAA0B,GAA1B,CAA+BS,QAAU,EAAG,CAC1C,MAAO,KAAKR,CAAAA,KAAMoB,CAAAA,SAAX,CAAqB,IAAKH,CAAAA,QAAL,EAArB,CADmC,CAA5C,CAIAE,OAAA,CAAepB,SAAf,CAA0B,GAA1B,CAA+BM,QAAU,EAAG,CAC1C,MAAO,KAAKL,CAAAA,KAAMqB,CAAAA,WAAX,CAAuB,IAAKN,CAAAA,QAAL,EAAvB,CADmC,CAA5C,CAIAI,OAAA,CAAepB,SAAf,CAA0B,UAA1B,CAAsCgB,QAAiB,EAAG,CACxD,MAAO,KAAKf,CAAAA,KAAMsB,CAAAA,WAAX,CAAuB,IAAKjB,CAAAA,CAAL,EAAvB,CADiD,CAA1D,CAIAc,OAAA,CAAepB,SAAf,CAA0B,UAA1B,CAAsCkB,QAAiB,EAAG,CACxD,MAAO,KAAKjB,CAAAA,KAAMuB,CAAAA,SAAX,CAAqB,IAAKf,CAAAA,CAAL,EAArB,CADiD,CAA1D,CAIAT;SAAUyB,CAAAA,SAAUC,CAAAA,OAApB,CAA8BC,QAAgB,EAAG,CAC/C,MAAO,KAAKX,CAAAA,QAAL,EAAgBY,CAAAA,MAAhB,CAAuB,IAAKV,CAAAA,QAAL,EAAvB,CADwC,CAIjDlB,UAAUyB,CAAAA,SAAUI,CAAAA,KAApB,CAA4BC,QAAc,EAAG,CAC3C,MAAOX,MAAMY,CAAAA,MAAN,CAAa,IAAKL,CAAAA,OAAL,EAAb,CAA6B,KAA7B,CAAoCM,CAAAA,WAApC,EADoC,CAI7ClC,OAAOC,CAAAA,OAAP,CAAiBC,SAjEqG;\",\n\"sources\":[\"node_modules/elliptic/lib/elliptic/eddsa/signature.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$elliptic$lib$elliptic$eddsa$signature\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar BN = require('bn.js');\\nvar utils = require('../utils');\\nvar assert = utils.assert;\\nvar cachedProperty = utils.cachedProperty;\\nvar parseBytes = utils.parseBytes;\\n\\n/**\\n* @param {EDDSA} eddsa - eddsa instance\\n* @param {Array<Bytes>|Object} sig -\\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\\n*/\\nfunction Signature(eddsa, sig) {\\n  this.eddsa = eddsa;\\n\\n  if (typeof sig !== 'object')\\n    sig = parseBytes(sig);\\n\\n  if (Array.isArray(sig)) {\\n    sig = {\\n      R: sig.slice(0, eddsa.encodingLength),\\n      S: sig.slice(eddsa.encodingLength),\\n    };\\n  }\\n\\n  assert(sig.R && sig.S, 'Signature without R or S');\\n\\n  if (eddsa.isPoint(sig.R))\\n    this._R = sig.R;\\n  if (sig.S instanceof BN)\\n    this._S = sig.S;\\n\\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\\n}\\n\\ncachedProperty(Signature, 'S', function S() {\\n  return this.eddsa.decodeInt(this.Sencoded());\\n});\\n\\ncachedProperty(Signature, 'R', function R() {\\n  return this.eddsa.decodePoint(this.Rencoded());\\n});\\n\\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\\n  return this.eddsa.encodePoint(this.R());\\n});\\n\\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\\n  return this.eddsa.encodeInt(this.S());\\n});\\n\\nSignature.prototype.toBytes = function toBytes() {\\n  return this.Rencoded().concat(this.Sencoded());\\n};\\n\\nSignature.prototype.toHex = function toHex() {\\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\\n};\\n\\nmodule.exports = Signature;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Signature\",\"eddsa\",\"sig\",\"parseBytes\",\"Array\",\"isArray\",\"R\",\"slice\",\"encodingLength\",\"S\",\"assert\",\"isPoint\",\"_R\",\"BN\",\"_S\",\"_Rencoded\",\"Rencoded\",\"_Sencoded\",\"Sencoded\",\"utils\",\"cachedProperty\",\"decodeInt\",\"decodePoint\",\"encodePoint\",\"encodeInt\",\"prototype\",\"toBytes\",\"Signature.prototype.toBytes\",\"concat\",\"toHex\",\"Signature.prototype.toHex\",\"encode\",\"toUpperCase\"]\n}\n"]