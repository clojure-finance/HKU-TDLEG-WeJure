["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/varint/decode.js"],"~:js","shadow$provide.module$node_modules$varint$decode=function(global,require,module,exports){function read(buf,offset){var res=0;offset=offset||0;var shift=0,counter=offset,l=buf.length;do{if(counter>=l)throw read.bytes=0,new RangeError(\"Could not decode varint\");var b=buf[counter++];res+=28>shift?(b&REST)<<shift:(b&REST)*Math.pow(2,shift);shift+=7}while(b>=MSB);read.bytes=counter-offset;return res}module.exports=read;var MSB=128,REST=127}","~:source","shadow$provide[\"module$node_modules$varint$decode\"] = function(global,require,module,exports) {\nmodule.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["bytes"]],"~:compiled-at",1644840880220,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$varint$decode.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,iCAAA,CAAsD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAM9FC,QAASA,KAAI,CAACC,GAAD,CAAMC,MAAN,CAAc,CAAA,IACrBC,IAAS,CACTD,OAFqB,CAEZA,MAFY,EAEF,CAFE,KAGrBE,MAAS,CAHY,CAIrBC,QAAUH,MAJW,CAMrBI,EAAIL,GAAIM,CAAAA,MAEZ,GAAG,CACD,GAAIF,OAAJ,EAAeC,CAAf,CAEE,KADAN,KAAKQ,CAAAA,KACC,CADO,CACP,CAAA,IAAIC,UAAJ,CAAe,yBAAf,CAAN,CAEF,IAAAC,EAAIT,GAAA,CAAII,OAAA,EAAJ,CACJF,IAAA,EAAe,EAAR,CAAAC,KAAA,EACFM,CADE,CACEC,IADF,GACWP,KADX,EAEFM,CAFE,CAEEC,IAFF,EAEUC,IAAKC,CAAAA,GAAL,CAAS,CAAT,CAAYT,KAAZ,CACjBA,MAAA,EAAS,CATR,CAAH,MAUSM,CAVT,EAUcI,GAVd,CAYAd,KAAKQ,CAAAA,KAAL,CAAaH,OAAb,CAAuBH,MAEvB,OAAOC,IAtBkB,CAL3BL,MAAOC,CAAAA,OAAP,CAAiBC,IAD6E,KAG1Fc,IAAM,GAHoF,CAI1FH,KAAO,GAJmF;\",\n\"sources\":[\"node_modules/varint/decode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$varint$decode\\\"] = function(global,require,module,exports) {\\nmodule.exports = read\\n\\nvar MSB = 0x80\\n  , REST = 0x7F\\n\\nfunction read(buf, offset) {\\n  var res    = 0\\n    , offset = offset || 0\\n    , shift  = 0\\n    , counter = offset\\n    , b\\n    , l = buf.length\\n\\n  do {\\n    if (counter >= l) {\\n      read.bytes = 0\\n      throw new RangeError('Could not decode varint')\\n    }\\n    b = buf[counter++]\\n    res += shift < 28\\n      ? (b & REST) << shift\\n      : (b & REST) * Math.pow(2, shift)\\n    shift += 7\\n  } while (b >= MSB)\\n\\n  read.bytes = counter - offset\\n\\n  return res\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"read\",\"buf\",\"offset\",\"res\",\"shift\",\"counter\",\"l\",\"length\",\"bytes\",\"RangeError\",\"b\",\"REST\",\"Math\",\"pow\",\"MSB\"]\n}\n"]