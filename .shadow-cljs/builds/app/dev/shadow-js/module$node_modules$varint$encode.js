["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/varint/encode.js"],"~:js","shadow$provide.module$node_modules$varint$encode=function(global,require,module,exports){function encode(num,out,offset){out=out||[];for(var oldOffset=offset=offset||0;num>=INT;)out[offset++]=num&255|MSB,num/=128;for(;num&MSBALL;)out[offset++]=num&255|MSB,num>>>=7;out[offset]=num|0;encode.bytes=offset-oldOffset+1;return out}module.exports=encode;var MSB=128,MSBALL=-128,INT=Math.pow(2,31)}","~:source","shadow$provide[\"module$node_modules$varint$encode\"] = function(global,require,module,exports) {\nmodule.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["bytes"]],"~:compiled-at",1644840880219,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$varint$encode.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,iCAAA,CAAsD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQ9FC,QAASA,OAAM,CAACC,GAAD,CAAMC,GAAN,CAAWC,MAAX,CAAmB,CAChCD,GAAA,CAAMA,GAAN,EAAa,EAIb,KAFA,IAAIE,UADJD,MACIC,CADKD,MACLC,EADe,CAGnB,CAAMH,GAAN,EAAaI,GAAb,CAAA,CACEH,GAAA,CAAIC,MAAA,EAAJ,CACA,CADiBF,GACjB,CADuB,GACvB,CAD+BK,GAC/B,CAAAL,GAAA,EAAO,GAET,KAAA,CAAMA,GAAN,CAAYM,MAAZ,CAAA,CACEL,GAAA,CAAIC,MAAA,EAAJ,CACA,CADiBF,GACjB,CADuB,GACvB,CAD+BK,GAC/B,CAAAL,GAAA,IAAS,CAEXC,IAAA,CAAIC,MAAJ,CAAA,CAAcF,GAAd,CAAoB,CAEpBD,OAAOQ,CAAAA,KAAP,CAAeL,MAAf,CAAwBC,SAAxB,CAAoC,CAEpC,OAAOF,IAjByB,CAPlCJ,MAAOC,CAAAA,OAAP,CAAiBC,MAD6E,KAG1FM,IAAM,GAHoF,CAK1FC,OADOE,CAAAA,GAJmF,CAM1FJ,IAAMK,IAAKC,CAAAA,GAAL,CAAS,CAAT,CAAY,EAAZ,CANoF;\",\n\"sources\":[\"node_modules/varint/encode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$varint$encode\\\"] = function(global,require,module,exports) {\\nmodule.exports = encode\\n\\nvar MSB = 0x80\\n  , REST = 0x7F\\n  , MSBALL = ~REST\\n  , INT = Math.pow(2, 31)\\n\\nfunction encode(num, out, offset) {\\n  out = out || []\\n  offset = offset || 0\\n  var oldOffset = offset\\n\\n  while(num >= INT) {\\n    out[offset++] = (num & 0xFF) | MSB\\n    num /= 128\\n  }\\n  while(num & MSBALL) {\\n    out[offset++] = (num & 0xFF) | MSB\\n    num >>>= 7\\n  }\\n  out[offset] = num | 0\\n  \\n  encode.bytes = offset - oldOffset + 1\\n  \\n  return out\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"encode\",\"num\",\"out\",\"offset\",\"oldOffset\",\"INT\",\"MSB\",\"MSBALL\",\"bytes\",\"REST\",\"Math\",\"pow\"]\n}\n"]