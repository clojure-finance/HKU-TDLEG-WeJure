["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@ethersproject/signing-key/lib/index.js"],"~:js","shadow$provide.module$node_modules$$ethersproject$signing_key$lib$index=function(global,require,module,exports){function getCurve(){_curve||(_curve=new elliptic_1.EC(\"secp256k1\"));return _curve}function computePublicKey(key,compressed){key=(0,bytes_1.arrayify)(key);if(32===key.length){var signingKey=new SigningKey(key);return compressed?\"0x\"+getCurve().keyFromPrivate(key).getPublic(!0,\"hex\"):signingKey.publicKey}return 33===key.length?compressed?(0,bytes_1.hexlify)(key):\"0x\"+getCurve().keyFromPublic(key).getPublic(!1,\n\"hex\"):65===key.length?compressed?\"0x\"+getCurve().keyFromPublic(key).getPublic(!0,\"hex\"):(0,bytes_1.hexlify)(key):logger.throwArgumentError(\"invalid public or private key\",\"key\",\"[REDACTED]\")}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.computePublicKey=exports.recoverPublicKey=exports.SigningKey=void 0;var elliptic_1=require(\"module$node_modules$$ethersproject$signing_key$lib$elliptic\"),bytes_1=require(\"module$node_modules$$ethersproject$bytes$lib$index\"),properties_1=require(\"module$node_modules$$ethersproject$properties$lib$index\");\nglobal=require(\"module$node_modules$$ethersproject$logger$lib$index\");require=require(\"module$node_modules$$ethersproject$signing_key$lib$_version\");var logger=new global.Logger(require.version),_curve=null,SigningKey=function(){function SigningKey(privateKey){(0,properties_1.defineReadOnly)(this,\"curve\",\"secp256k1\");(0,properties_1.defineReadOnly)(this,\"privateKey\",(0,bytes_1.hexlify)(privateKey));privateKey=getCurve().keyFromPrivate((0,bytes_1.arrayify)(this.privateKey));(0,properties_1.defineReadOnly)(this,\n\"publicKey\",\"0x\"+privateKey.getPublic(!1,\"hex\"));(0,properties_1.defineReadOnly)(this,\"compressedPublicKey\",\"0x\"+privateKey.getPublic(!0,\"hex\"));(0,properties_1.defineReadOnly)(this,\"_isSigningKey\",!0)}SigningKey.prototype._addPoint=function(other){var p0=getCurve().keyFromPublic((0,bytes_1.arrayify)(this.publicKey));other=getCurve().keyFromPublic((0,bytes_1.arrayify)(other));return\"0x\"+p0.pub.add(other.pub).encodeCompressed(\"hex\")};SigningKey.prototype.signDigest=function(digest){var keyPair=getCurve().keyFromPrivate((0,bytes_1.arrayify)(this.privateKey)),\ndigestBytes=(0,bytes_1.arrayify)(digest);32!==digestBytes.length&&logger.throwArgumentError(\"bad digest length\",\"digest\",digest);digest=keyPair.sign(digestBytes,{canonical:!0});return(0,bytes_1.splitSignature)({recoveryParam:digest.recoveryParam,r:(0,bytes_1.hexZeroPad)(\"0x\"+digest.r.toString(16),32),s:(0,bytes_1.hexZeroPad)(\"0x\"+digest.s.toString(16),32)})};SigningKey.prototype.computeSharedSecret=function(otherKey){var keyPair=getCurve().keyFromPrivate((0,bytes_1.arrayify)(this.privateKey));otherKey=\ngetCurve().keyFromPublic((0,bytes_1.arrayify)(computePublicKey(otherKey)));return(0,bytes_1.hexZeroPad)(\"0x\"+keyPair.derive(otherKey.getPublic()).toString(16),32)};SigningKey.isSigningKey=function(value){return!(!value||!value._isSigningKey)};return SigningKey}();exports.SigningKey=SigningKey;exports.recoverPublicKey=function(digest,signature){signature=(0,bytes_1.splitSignature)(signature);var rs={r:(0,bytes_1.arrayify)(signature.r),s:(0,bytes_1.arrayify)(signature.s)};return\"0x\"+getCurve().recoverPubKey((0,bytes_1.arrayify)(digest),\nrs,signature.recoveryParam).encode(\"hex\",!1)};exports.computePublicKey=computePublicKey}","~:source","shadow$provide[\"module$node_modules$$ethersproject$signing_key$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computePublicKey = exports.recoverPublicKey = exports.SigningKey = void 0;\nvar elliptic_1 = require(\"./elliptic\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar properties_1 = require(\"@ethersproject/properties\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new elliptic_1.EC(\"secp256k1\");\n    }\n    return _curve;\n}\nvar SigningKey = /** @class */ (function () {\n    function SigningKey(privateKey) {\n        (0, properties_1.defineReadOnly)(this, \"curve\", \"secp256k1\");\n        (0, properties_1.defineReadOnly)(this, \"privateKey\", (0, bytes_1.hexlify)(privateKey));\n        var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));\n        (0, properties_1.defineReadOnly)(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        (0, properties_1.defineReadOnly)(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        (0, properties_1.defineReadOnly)(this, \"_isSigningKey\", true);\n    }\n    SigningKey.prototype._addPoint = function (other) {\n        var p0 = getCurve().keyFromPublic((0, bytes_1.arrayify)(this.publicKey));\n        var p1 = getCurve().keyFromPublic((0, bytes_1.arrayify)(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    };\n    SigningKey.prototype.signDigest = function (digest) {\n        var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));\n        var digestBytes = (0, bytes_1.arrayify)(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        var signature = keyPair.sign(digestBytes, { canonical: true });\n        return (0, bytes_1.splitSignature)({\n            recoveryParam: signature.recoveryParam,\n            r: (0, bytes_1.hexZeroPad)(\"0x\" + signature.r.toString(16), 32),\n            s: (0, bytes_1.hexZeroPad)(\"0x\" + signature.s.toString(16), 32),\n        });\n    };\n    SigningKey.prototype.computeSharedSecret = function (otherKey) {\n        var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));\n        var otherKeyPair = getCurve().keyFromPublic((0, bytes_1.arrayify)(computePublicKey(otherKey)));\n        return (0, bytes_1.hexZeroPad)(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    };\n    SigningKey.isSigningKey = function (value) {\n        return !!(value && value._isSigningKey);\n    };\n    return SigningKey;\n}());\nexports.SigningKey = SigningKey;\nfunction recoverPublicKey(digest, signature) {\n    var sig = (0, bytes_1.splitSignature)(signature);\n    var rs = { r: (0, bytes_1.arrayify)(sig.r), s: (0, bytes_1.arrayify)(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey((0, bytes_1.arrayify)(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexports.recoverPublicKey = recoverPublicKey;\nfunction computePublicKey(key, compressed) {\n    var bytes = (0, bytes_1.arrayify)(key);\n    if (bytes.length === 32) {\n        var signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    }\n    else if (bytes.length === 33) {\n        if (compressed) {\n            return (0, bytes_1.hexlify)(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    }\n    else if (bytes.length === 65) {\n        if (!compressed) {\n            return (0, bytes_1.hexlify)(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\nexports.computePublicKey = computePublicKey;\n//# sourceMappingURL=index.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$ethersproject$bytes$lib$index","~$module$node_modules$$ethersproject$signing_key$lib$_version","~$module$node_modules$$ethersproject$logger$lib$index","~$module$node_modules$$ethersproject$properties$lib$index","~$module$node_modules$$ethersproject$signing_key$lib$elliptic"]],"~:properties",["^5",["s","recoveryParam","recoverPublicKey","computePublicKey","__esModule","signDigest","value","canonical","isSigningKey","r","computeSharedSecret","_addPoint","SigningKey"]],"~:compiled-at",1644840880162,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$ethersproject$signing_key$lib$index.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@ethersproject/signing-key/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$ethersproject$signing_key$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.computePublicKey = exports.recoverPublicKey = exports.SigningKey = void 0;\\nvar elliptic_1 = require(\\\"./elliptic\\\");\\nvar bytes_1 = require(\\\"@ethersproject/bytes\\\");\\nvar properties_1 = require(\\\"@ethersproject/properties\\\");\\nvar logger_1 = require(\\\"@ethersproject/logger\\\");\\nvar _version_1 = require(\\\"./_version\\\");\\nvar logger = new logger_1.Logger(_version_1.version);\\nvar _curve = null;\\nfunction getCurve() {\\n    if (!_curve) {\\n        _curve = new elliptic_1.EC(\\\"secp256k1\\\");\\n    }\\n    return _curve;\\n}\\nvar SigningKey = /** @class */ (function () {\\n    function SigningKey(privateKey) {\\n        (0, properties_1.defineReadOnly)(this, \\\"curve\\\", \\\"secp256k1\\\");\\n        (0, properties_1.defineReadOnly)(this, \\\"privateKey\\\", (0, bytes_1.hexlify)(privateKey));\\n        var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));\\n        (0, properties_1.defineReadOnly)(this, \\\"publicKey\\\", \\\"0x\\\" + keyPair.getPublic(false, \\\"hex\\\"));\\n        (0, properties_1.defineReadOnly)(this, \\\"compressedPublicKey\\\", \\\"0x\\\" + keyPair.getPublic(true, \\\"hex\\\"));\\n        (0, properties_1.defineReadOnly)(this, \\\"_isSigningKey\\\", true);\\n    }\\n    SigningKey.prototype._addPoint = function (other) {\\n        var p0 = getCurve().keyFromPublic((0, bytes_1.arrayify)(this.publicKey));\\n        var p1 = getCurve().keyFromPublic((0, bytes_1.arrayify)(other));\\n        return \\\"0x\\\" + p0.pub.add(p1.pub).encodeCompressed(\\\"hex\\\");\\n    };\\n    SigningKey.prototype.signDigest = function (digest) {\\n        var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));\\n        var digestBytes = (0, bytes_1.arrayify)(digest);\\n        if (digestBytes.length !== 32) {\\n            logger.throwArgumentError(\\\"bad digest length\\\", \\\"digest\\\", digest);\\n        }\\n        var signature = keyPair.sign(digestBytes, { canonical: true });\\n        return (0, bytes_1.splitSignature)({\\n            recoveryParam: signature.recoveryParam,\\n            r: (0, bytes_1.hexZeroPad)(\\\"0x\\\" + signature.r.toString(16), 32),\\n            s: (0, bytes_1.hexZeroPad)(\\\"0x\\\" + signature.s.toString(16), 32),\\n        });\\n    };\\n    SigningKey.prototype.computeSharedSecret = function (otherKey) {\\n        var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));\\n        var otherKeyPair = getCurve().keyFromPublic((0, bytes_1.arrayify)(computePublicKey(otherKey)));\\n        return (0, bytes_1.hexZeroPad)(\\\"0x\\\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\\n    };\\n    SigningKey.isSigningKey = function (value) {\\n        return !!(value && value._isSigningKey);\\n    };\\n    return SigningKey;\\n}());\\nexports.SigningKey = SigningKey;\\nfunction recoverPublicKey(digest, signature) {\\n    var sig = (0, bytes_1.splitSignature)(signature);\\n    var rs = { r: (0, bytes_1.arrayify)(sig.r), s: (0, bytes_1.arrayify)(sig.s) };\\n    return \\\"0x\\\" + getCurve().recoverPubKey((0, bytes_1.arrayify)(digest), rs, sig.recoveryParam).encode(\\\"hex\\\", false);\\n}\\nexports.recoverPublicKey = recoverPublicKey;\\nfunction computePublicKey(key, compressed) {\\n    var bytes = (0, bytes_1.arrayify)(key);\\n    if (bytes.length === 32) {\\n        var signingKey = new SigningKey(bytes);\\n        if (compressed) {\\n            return \\\"0x\\\" + getCurve().keyFromPrivate(bytes).getPublic(true, \\\"hex\\\");\\n        }\\n        return signingKey.publicKey;\\n    }\\n    else if (bytes.length === 33) {\\n        if (compressed) {\\n            return (0, bytes_1.hexlify)(bytes);\\n        }\\n        return \\\"0x\\\" + getCurve().keyFromPublic(bytes).getPublic(false, \\\"hex\\\");\\n    }\\n    else if (bytes.length === 65) {\\n        if (!compressed) {\\n            return (0, bytes_1.hexlify)(bytes);\\n        }\\n        return \\\"0x\\\" + getCurve().keyFromPublic(bytes).getPublic(true, \\\"hex\\\");\\n    }\\n    return logger.throwArgumentError(\\\"invalid public or private key\\\", \\\"key\\\", \\\"[REDACTED]\\\");\\n}\\nexports.computePublicKey = computePublicKey;\\n//# sourceMappingURL=index.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getCurve\",\"_curve\",\"elliptic_1\",\"EC\",\"computePublicKey\",\"key\",\"compressed\",\"bytes\",\"bytes_1\",\"arrayify\",\"length\",\"signingKey\",\"SigningKey\",\"keyFromPrivate\",\"getPublic\",\"publicKey\",\"hexlify\",\"keyFromPublic\",\"logger\",\"throwArgumentError\",\"Object\",\"defineProperty\",\"value\",\"recoverPublicKey\",\"properties_1\",\"logger_1\",\"_version_1\",\"Logger\",\"version\",\"privateKey\",\"defineReadOnly\",\"keyPair\",\"prototype\",\"_addPoint\",\"SigningKey.prototype._addPoint\",\"other\",\"p0\",\"p1\",\"pub\",\"add\",\"encodeCompressed\",\"signDigest\",\"SigningKey.prototype.signDigest\",\"digest\",\"digestBytes\",\"signature\",\"sign\",\"canonical\",\"splitSignature\",\"recoveryParam\",\"r\",\"hexZeroPad\",\"toString\",\"s\",\"computeSharedSecret\",\"SigningKey.prototype.computeSharedSecret\",\"otherKey\",\"otherKeyPair\",\"derive\",\"isSigningKey\",\"SigningKey.isSigningKey\",\"_isSigningKey\",\"sig\",\"rs\",\"recoverPubKey\",\"encode\"]\n}\n"]