["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/cids/src/cid-util.js"],"~:js","shadow$provide.module$node_modules$cids$src$cid_util=function(global,require,module,exports){const mh=require(\"module$node_modules$multihashes$src$index\"),{Buffer}=require(\"module$node_modules$buffer$index\");module.exports={checkCIDComponents:function(other){if(null==other)return\"null values are not valid CIDs\";if(0!==other.version&&1!==other.version)return\"Invalid version, must be a number equal to 1 or 0\";if(\"string\"!==typeof other.codec)return\"codec must be string\";if(0===other.version){if(\"dag-pb\"!==\nother.codec)return\"codec must be 'dag-pb' for CIDv0\";if(\"base58btc\"!==other.multibaseName)return\"multibaseName must be 'base58btc' for CIDv0\"}if(!Buffer.isBuffer(other.multihash))return\"multihash must be a Buffer\";try{mh.validate(other.multihash)}catch(err){return(other=err.message)||(other=\"Multihash validation failed\"),other}}}}","~:source","shadow$provide[\"module$node_modules$cids$src$cid_util\"] = function(global,require,module,exports) {\n'use strict'\n\nconst mh = require('multihashes')\nconst { Buffer } = require('buffer')\nvar CIDUtil = {\n  /**\n   * Test if the given input is a valid CID object.\n   * Returns an error message if it is not.\n   * Returns undefined if it is a valid CID.\n   *\n   * @param {any} other\n   * @returns {string}\n   */\n  checkCIDComponents: function (other) {\n    if (other == null) {\n      return 'null values are not valid CIDs'\n    }\n\n    if (!(other.version === 0 || other.version === 1)) {\n      return 'Invalid version, must be a number equal to 1 or 0'\n    }\n\n    if (typeof other.codec !== 'string') {\n      return 'codec must be string'\n    }\n\n    if (other.version === 0) {\n      if (other.codec !== 'dag-pb') {\n        return \"codec must be 'dag-pb' for CIDv0\"\n      }\n      if (other.multibaseName !== 'base58btc') {\n        return \"multibaseName must be 'base58btc' for CIDv0\"\n      }\n    }\n\n    if (!Buffer.isBuffer(other.multihash)) {\n      return 'multihash must be a Buffer'\n    }\n\n    try {\n      mh.validate(other.multihash)\n    } catch (err) {\n      let errorMsg = err.message\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\n        errorMsg = 'Multihash validation failed'\n      }\n      return errorMsg\n    }\n  }\n}\n\nmodule.exports = CIDUtil\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$multihashes$src$index","~$shadow.js","~$module$node_modules$buffer$index"]],"~:properties",["^5",["checkCIDComponents"]],"~:compiled-at",1644840880235,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$cids$src$cid_util.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,qCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlG,MAAMC,GAAKH,OAAA,CAAQ,2CAAR,CAAX,CACM,CAAEI,MAAF,CAAA,CAAaJ,OAAA,CAAQ,kCAAR,CAgDnBC,OAAOC,CAAAA,OAAP,CA/CcG,CASZC,mBAAoBA,QAAS,CAACC,KAAD,CAAQ,CACnC,GAAa,IAAb,EAAIA,KAAJ,CACE,MAAO,gCAGT,IAAwB,CAAxB,GAAMA,KAAMC,CAAAA,OAAZ,EAA+C,CAA/C,GAA6BD,KAAMC,CAAAA,OAAnC,CACE,MAAO,mDAGT,IAA2B,QAA3B,GAAI,MAAOD,MAAME,CAAAA,KAAjB,CACE,MAAO,sBAGT,IAAsB,CAAtB,GAAIF,KAAMC,CAAAA,OAAV,CAAyB,CACvB,GAAoB,QAApB;AAAID,KAAME,CAAAA,KAAV,CACE,MAAO,kCAET,IAA4B,WAA5B,GAAIF,KAAMG,CAAAA,aAAV,CACE,MAAO,6CALc,CASzB,GAAI,CAACN,MAAOO,CAAAA,QAAP,CAAgBJ,KAAMK,CAAAA,SAAtB,CAAL,CACE,MAAO,4BAGT,IAAI,CACFT,EAAGU,CAAAA,QAAH,CAAYN,KAAMK,CAAAA,SAAlB,CADE,CAEF,MAAOE,GAAP,CAAY,CAKZ,MAAOC,CAJHA,KAIGA,CAJQD,GAAIE,CAAAA,OAIZD,IAFLA,KAEKA,CAFM,6BAENA,EAAAA,KALK,CA5BqB,CATzBV,CALoF;\",\n\"sources\":[\"node_modules/cids/src/cid-util.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$cids$src$cid_util\\\"] = function(global,require,module,exports) {\\n'use strict'\\n\\nconst mh = require('multihashes')\\nconst { Buffer } = require('buffer')\\nvar CIDUtil = {\\n  /**\\n   * Test if the given input is a valid CID object.\\n   * Returns an error message if it is not.\\n   * Returns undefined if it is a valid CID.\\n   *\\n   * @param {any} other\\n   * @returns {string}\\n   */\\n  checkCIDComponents: function (other) {\\n    if (other == null) {\\n      return 'null values are not valid CIDs'\\n    }\\n\\n    if (!(other.version === 0 || other.version === 1)) {\\n      return 'Invalid version, must be a number equal to 1 or 0'\\n    }\\n\\n    if (typeof other.codec !== 'string') {\\n      return 'codec must be string'\\n    }\\n\\n    if (other.version === 0) {\\n      if (other.codec !== 'dag-pb') {\\n        return \\\"codec must be 'dag-pb' for CIDv0\\\"\\n      }\\n      if (other.multibaseName !== 'base58btc') {\\n        return \\\"multibaseName must be 'base58btc' for CIDv0\\\"\\n      }\\n    }\\n\\n    if (!Buffer.isBuffer(other.multihash)) {\\n      return 'multihash must be a Buffer'\\n    }\\n\\n    try {\\n      mh.validate(other.multihash)\\n    } catch (err) {\\n      let errorMsg = err.message\\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\\n        errorMsg = 'Multihash validation failed'\\n      }\\n      return errorMsg\\n    }\\n  }\\n}\\n\\nmodule.exports = CIDUtil\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"mh\",\"Buffer\",\"CIDUtil\",\"checkCIDComponents\",\"other\",\"version\",\"codec\",\"multibaseName\",\"isBuffer\",\"multihash\",\"validate\",\"err\",\"errorMsg\",\"message\"]\n}\n"]