["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@ethereumjs/tx/dist.browser/util.js"],"~:js","shadow$provide.module$node_modules$$ethereumjs$tx$dist_browser$util=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.AccessLists=void 0;var ethereumjs_util_1=require(\"module$node_modules$ethereumjs_util$dist_browser$index\"),types_1=require(\"module$node_modules$$ethereumjs$tx$dist_browser$types\");global=function(){function AccessLists(){}AccessLists.getAccessListData=function(accessList){if(accessList&&(0,types_1.isAccessList)(accessList)){var AccessListJSON=\naccessList;for(var newAccessList=[],i=0;i<accessList.length;i++){for(var item=accessList[i],addressBuffer=(0,ethereumjs_util_1.toBuffer)(item.address),storageItems=[],index=0;index<item.storageKeys.length;index++)storageItems.push((0,ethereumjs_util_1.toBuffer)(item.storageKeys[index]));newAccessList.push([addressBuffer,storageItems])}accessList=newAccessList}else for(accessList=null!==accessList&&void 0!==accessList?accessList:[],AccessListJSON=[],i=0;i<accessList.length;i++){newAccessList=accessList[i];\naddressBuffer=(0,ethereumjs_util_1.bufferToHex)(newAccessList[0]);storageItems=[];for(item=0;item<newAccessList[1].length;item++)storageItems.push((0,ethereumjs_util_1.bufferToHex)(newAccessList[1][item]));AccessListJSON.push({address:addressBuffer,storageKeys:storageItems})}return{AccessListJSON,accessList}};AccessLists.verifyAccessList=function(accessList){for(var key=0;key<accessList.length;key++){var accessListItem=accessList[key],address=accessListItem[0],storageSlots=accessListItem[1];if(void 0!==\naccessListItem[2])throw Error(\"Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.\");if(20!=address.length)throw Error(\"Invalid EIP-2930 transaction: address length should be 20 bytes\");for(accessListItem=0;accessListItem<storageSlots.length;accessListItem++)if(32!=storageSlots[accessListItem].length)throw Error(\"Invalid EIP-2930 transaction: storage slot length should be 32 bytes\");}};AccessLists.getAccessListJSON=function(accessList){for(var accessListJSON=\n[],index=0;index<accessList.length;index++){var item=accessList[index],JSONItem={address:\"0x\"+(0,ethereumjs_util_1.setLengthLeft)(item[0],20).toString(\"hex\"),storageKeys:[]};item=item[1];for(var slot=0;slot<item.length;slot++)JSONItem.storageKeys.push(\"0x\"+(0,ethereumjs_util_1.setLengthLeft)(item[slot],32).toString(\"hex\"));accessListJSON.push(JSONItem)}return accessListJSON};AccessLists.getDataFeeEIP2930=function(accessList,common){var accessListStorageKeyCost=common.param(\"gasPrices\",\"accessListStorageKeyCost\");\ncommon=common.param(\"gasPrices\",\"accessListAddressCost\");for(var slots=0,index=0;index<accessList.length;index++)slots+=accessList[index][1].length;return accessList.length*common+slots*accessListStorageKeyCost};return AccessLists}();exports.AccessLists=global}","~:source","shadow$provide[\"module$node_modules$$ethereumjs$tx$dist_browser$util\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessLists = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar AccessLists = /** @class */ (function () {\n    function AccessLists() {\n    }\n    AccessLists.getAccessListData = function (accessList) {\n        var AccessListJSON;\n        var bufferAccessList;\n        if (accessList && (0, types_1.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            var newAccessList = [];\n            for (var i = 0; i < accessList.length; i++) {\n                var item = accessList[i];\n                var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);\n                var storageItems = [];\n                for (var index = 0; index < item.storageKeys.length; index++) {\n                    storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));\n                }\n                newAccessList.push([addressBuffer, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n            // build the JSON\n            var json = [];\n            for (var i = 0; i < bufferAccessList.length; i++) {\n                var data = bufferAccessList[i];\n                var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);\n                var storageKeys = [];\n                for (var item = 0; item < data[1].length; item++) {\n                    storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));\n                }\n                var jsonItem = {\n                    address: address,\n                    storageKeys: storageKeys,\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON: AccessListJSON,\n            accessList: bufferAccessList,\n        };\n    };\n    AccessLists.verifyAccessList = function (accessList) {\n        for (var key = 0; key < accessList.length; key++) {\n            var accessListItem = accessList[key];\n            var address = accessListItem[0];\n            var storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n            }\n            if (address.length != 20) {\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n            }\n            for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n                if (storageSlots[storageSlot].length != 32) {\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n                }\n            }\n        }\n    };\n    AccessLists.getAccessListJSON = function (accessList) {\n        var accessListJSON = [];\n        for (var index = 0; index < accessList.length; index++) {\n            var item = accessList[index];\n            var JSONItem = {\n                address: '0x' + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString('hex'),\n                storageKeys: [],\n            };\n            var storageSlots = item[1];\n            for (var slot = 0; slot < storageSlots.length; slot++) {\n                var storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push('0x' + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    };\n    AccessLists.getDataFeeEIP2930 = function (accessList, common) {\n        var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n        var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n        var slots = 0;\n        for (var index = 0; index < accessList.length; index++) {\n            var item = accessList[index];\n            var storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        var addresses = accessList.length;\n        return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\n    };\n    return AccessLists;\n}());\nexports.AccessLists = AccessLists;\n//# sourceMappingURL=util.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$ethereumjs_util$dist_browser$index","~$shadow.js","~$module$node_modules$$ethereumjs$tx$dist_browser$types"]],"~:properties",["^5",["verifyAccessList","accessList","AccessLists","__esModule","storageKeys","getDataFeeEIP2930","value","address","getAccessListData","AccessListJSON","getAccessListJSON"]],"~:compiled-at",1644840880375,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$ethereumjs$tx$dist_browser$util.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@ethereumjs/tx/dist.browser/util.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$ethereumjs$tx$dist_browser$util\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.AccessLists = void 0;\\nvar ethereumjs_util_1 = require(\\\"ethereumjs-util\\\");\\nvar types_1 = require(\\\"./types\\\");\\nvar AccessLists = /** @class */ (function () {\\n    function AccessLists() {\\n    }\\n    AccessLists.getAccessListData = function (accessList) {\\n        var AccessListJSON;\\n        var bufferAccessList;\\n        if (accessList && (0, types_1.isAccessList)(accessList)) {\\n            AccessListJSON = accessList;\\n            var newAccessList = [];\\n            for (var i = 0; i < accessList.length; i++) {\\n                var item = accessList[i];\\n                var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);\\n                var storageItems = [];\\n                for (var index = 0; index < item.storageKeys.length; index++) {\\n                    storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));\\n                }\\n                newAccessList.push([addressBuffer, storageItems]);\\n            }\\n            bufferAccessList = newAccessList;\\n        }\\n        else {\\n            bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\\n            // build the JSON\\n            var json = [];\\n            for (var i = 0; i < bufferAccessList.length; i++) {\\n                var data = bufferAccessList[i];\\n                var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);\\n                var storageKeys = [];\\n                for (var item = 0; item < data[1].length; item++) {\\n                    storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));\\n                }\\n                var jsonItem = {\\n                    address: address,\\n                    storageKeys: storageKeys,\\n                };\\n                json.push(jsonItem);\\n            }\\n            AccessListJSON = json;\\n        }\\n        return {\\n            AccessListJSON: AccessListJSON,\\n            accessList: bufferAccessList,\\n        };\\n    };\\n    AccessLists.verifyAccessList = function (accessList) {\\n        for (var key = 0; key < accessList.length; key++) {\\n            var accessListItem = accessList[key];\\n            var address = accessListItem[0];\\n            var storageSlots = accessListItem[1];\\n            if (accessListItem[2] !== undefined) {\\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\\n            }\\n            if (address.length != 20) {\\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\\n            }\\n            for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\\n                if (storageSlots[storageSlot].length != 32) {\\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\\n                }\\n            }\\n        }\\n    };\\n    AccessLists.getAccessListJSON = function (accessList) {\\n        var accessListJSON = [];\\n        for (var index = 0; index < accessList.length; index++) {\\n            var item = accessList[index];\\n            var JSONItem = {\\n                address: '0x' + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString('hex'),\\n                storageKeys: [],\\n            };\\n            var storageSlots = item[1];\\n            for (var slot = 0; slot < storageSlots.length; slot++) {\\n                var storageSlot = storageSlots[slot];\\n                JSONItem.storageKeys.push('0x' + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\\n            }\\n            accessListJSON.push(JSONItem);\\n        }\\n        return accessListJSON;\\n    };\\n    AccessLists.getDataFeeEIP2930 = function (accessList, common) {\\n        var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\\n        var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\\n        var slots = 0;\\n        for (var index = 0; index < accessList.length; index++) {\\n            var item = accessList[index];\\n            var storageSlots = item[1];\\n            slots += storageSlots.length;\\n        }\\n        var addresses = accessList.length;\\n        return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\\n    };\\n    return AccessLists;\\n}());\\nexports.AccessLists = AccessLists;\\n//# sourceMappingURL=util.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"AccessLists\",\"ethereumjs_util_1\",\"types_1\",\"getAccessListData\",\"AccessLists.getAccessListData\",\"accessList\",\"isAccessList\",\"AccessListJSON\",\"newAccessList\",\"i\",\"length\",\"item\",\"addressBuffer\",\"toBuffer\",\"address\",\"storageItems\",\"index\",\"storageKeys\",\"push\",\"bufferAccessList\",\"json\",\"data\",\"bufferToHex\",\"jsonItem\",\"verifyAccessList\",\"AccessLists.verifyAccessList\",\"key\",\"accessListItem\",\"storageSlots\",\"undefined\",\"Error\",\"storageSlot\",\"getAccessListJSON\",\"AccessLists.getAccessListJSON\",\"accessListJSON\",\"JSONItem\",\"setLengthLeft\",\"toString\",\"slot\",\"getDataFeeEIP2930\",\"AccessLists.getDataFeeEIP2930\",\"common\",\"accessListStorageKeyCost\",\"param\",\"accessListAddressCost\",\"slots\"]\n}\n"]