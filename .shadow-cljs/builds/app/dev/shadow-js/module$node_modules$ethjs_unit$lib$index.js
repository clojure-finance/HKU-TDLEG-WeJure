["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/ethjs-unit/lib/index.js"],"~:js","shadow$provide.module$node_modules$ethjs_unit$lib$index=function(global,require,module,exports){function getValueOfUnit(unitInput){var unit=unitInput?unitInput.toLowerCase():\"ether\";unit=unitMap[unit];if(\"string\"!==typeof unit)throw Error(\"[ethjs-unit] the unit provided \"+unitInput+\" doesn't exists, please use the one of the following units \"+JSON.stringify(unitMap,null,2));return new BN(unit,10)}function numberToString(arg){if(\"string\"===typeof arg){if(!arg.match(/^-?[0-9.]+$/))throw Error(\"while converting number to string, invalid number value '\"+\narg+\"', should be a number matching (^-?[0-9.]+).\");return arg}if(\"number\"===typeof arg)return String(arg);if(\"object\"===typeof arg&&arg.toString&&(arg.toTwos||arg.dividedToIntegerBy))return arg.toPrecision?String(arg.toPrecision()):arg.toString(10);throw Error(\"while converting number to string, invalid number value '\"+arg+\"' type \"+typeof arg+\".\");}var BN=require(\"module$node_modules$ethjs_unit$node_modules$bn_js$lib$bn\"),numberToBN=require(\"module$node_modules$number_to_bn$src$index\"),zero=new BN(0),\nnegative1=new BN(-1),unitMap={noether:\"0\",wei:\"1\",kwei:\"1000\",Kwei:\"1000\",babbage:\"1000\",femtoether:\"1000\",mwei:\"1000000\",Mwei:\"1000000\",lovelace:\"1000000\",picoether:\"1000000\",gwei:\"1000000000\",Gwei:\"1000000000\",shannon:\"1000000000\",nanoether:\"1000000000\",nano:\"1000000000\",szabo:\"1000000000000\",microether:\"1000000000000\",micro:\"1000000000000\",finney:\"1000000000000000\",milliether:\"1000000000000000\",milli:\"1000000000000000\",ether:\"1000000000000000000\",kether:\"1000000000000000000000\",grand:\"1000000000000000000000\",\nmether:\"1000000000000000000000000\",gether:\"1000000000000000000000000000\",tether:\"1000000000000000000000000000000\"};module.exports={unitMap,numberToString,getValueOfUnit,fromWei:function(weiInput,unit,optionsInput){var wei=numberToBN(weiInput);weiInput=wei.lt(zero);var base=getValueOfUnit(unit);unit=unitMap[unit].length-1||1;optionsInput=optionsInput||{};weiInput&&(wei=wei.mul(negative1));for(var fraction=wei.mod(base).toString(10);fraction.length<unit;)fraction=\"0\"+fraction;optionsInput.pad||(fraction=\nfraction.match(/^([0-9]*[1-9]|0)(0*)/)[1]);wei=wei.div(base).toString(10);optionsInput.commify&&(wei=wei.replace(/\\B(?=(\\d{3})+(?!\\d))/g,\",\"));wei=\"\"+wei+(\"0\"==fraction?\"\":\".\"+fraction);weiInput&&(wei=\"-\"+wei);return wei},toWei:function(etherInput,unit){var ether=numberToString(etherInput),base=getValueOfUnit(unit),baseLength=unitMap[unit].length-1||1;(unit=\"-\"===ether.substring(0,1))&&(ether=ether.substring(1));if(\".\"===ether)throw Error(\"[ethjs-unit] while converting number \"+etherInput+\" to wei, invalid value\");\nvar comps=ether.split(\".\");if(2<comps.length)throw Error(\"[ethjs-unit] while converting number \"+etherInput+\" to wei,  too many decimal points\");ether=comps[0];comps=comps[1];ether||(ether=\"0\");comps||(comps=\"0\");if(comps.length>baseLength)throw Error(\"[ethjs-unit] while converting number \"+etherInput+\" to wei, too many decimal places\");for(;comps.length<baseLength;)comps+=\"0\";ether=new BN(ether);comps=new BN(comps);etherInput=ether.mul(base).add(comps);unit&&(etherInput=etherInput.mul(negative1));\nreturn new BN(etherInput.toString(10),10)}}}","~:source","shadow$provide[\"module$node_modules$ethjs_unit$lib$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\n\nvar zero = new BN(0);\nvar negative1 = new BN(-1);\n\n// complete ethereum unit map\nvar unitMap = {\n  'noether': '0', // eslint-disable-line\n  'wei': '1', // eslint-disable-line\n  'kwei': '1000', // eslint-disable-line\n  'Kwei': '1000', // eslint-disable-line\n  'babbage': '1000', // eslint-disable-line\n  'femtoether': '1000', // eslint-disable-line\n  'mwei': '1000000', // eslint-disable-line\n  'Mwei': '1000000', // eslint-disable-line\n  'lovelace': '1000000', // eslint-disable-line\n  'picoether': '1000000', // eslint-disable-line\n  'gwei': '1000000000', // eslint-disable-line\n  'Gwei': '1000000000', // eslint-disable-line\n  'shannon': '1000000000', // eslint-disable-line\n  'nanoether': '1000000000', // eslint-disable-line\n  'nano': '1000000000', // eslint-disable-line\n  'szabo': '1000000000000', // eslint-disable-line\n  'microether': '1000000000000', // eslint-disable-line\n  'micro': '1000000000000', // eslint-disable-line\n  'finney': '1000000000000000', // eslint-disable-line\n  'milliether': '1000000000000000', // eslint-disable-line\n  'milli': '1000000000000000', // eslint-disable-line\n  'ether': '1000000000000000000', // eslint-disable-line\n  'kether': '1000000000000000000000', // eslint-disable-line\n  'grand': '1000000000000000000000', // eslint-disable-line\n  'mether': '1000000000000000000000000', // eslint-disable-line\n  'gether': '1000000000000000000000000000', // eslint-disable-line\n  'tether': '1000000000000000000000000000000' };\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nfunction getValueOfUnit(unitInput) {\n  var unit = unitInput ? unitInput.toLowerCase() : 'ether';\n  var unitValue = unitMap[unit]; // eslint-disable-line\n\n  if (typeof unitValue !== 'string') {\n    throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));\n  }\n\n  return new BN(unitValue, 10);\n}\n\nfunction numberToString(arg) {\n  if (typeof arg === 'string') {\n    if (!arg.match(/^-?[0-9.]+$/)) {\n      throw new Error('while converting number to string, invalid number value \\'' + arg + '\\', should be a number matching (^-?[0-9.]+).');\n    }\n    return arg;\n  } else if (typeof arg === 'number') {\n    return String(arg);\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n    if (arg.toPrecision) {\n      return String(arg.toPrecision());\n    } else {\n      // eslint-disable-line\n      return arg.toString(10);\n    }\n  }\n  throw new Error('while converting number to string, invalid number value \\'' + arg + '\\' type ' + typeof arg + '.');\n}\n\nfunction fromWei(weiInput, unit, optionsInput) {\n  var wei = numberToBN(weiInput); // eslint-disable-line\n  var negative = wei.lt(zero); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n  var options = optionsInput || {};\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  var fraction = wei.mod(base).toString(10); // eslint-disable-line\n\n  while (fraction.length < baseLength) {\n    fraction = '0' + fraction;\n  }\n\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n\n  var whole = wei.div(base).toString(10); // eslint-disable-line\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line\n\n  if (negative) {\n    value = '-' + value;\n  }\n\n  return value;\n}\n\nfunction toWei(etherInput, unit) {\n  var ether = numberToString(etherInput); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n\n  // Is it negative?\n  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line\n  if (negative) {\n    ether = ether.substring(1);\n  }\n\n  if (ether === '.') {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');\n  }\n\n  // Split it into a whole and fractional part\n  var comps = ether.split('.'); // eslint-disable-line\n  if (comps.length > 2) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');\n  }\n\n  var whole = comps[0],\n      fraction = comps[1]; // eslint-disable-line\n\n  if (!whole) {\n    whole = '0';\n  }\n  if (!fraction) {\n    fraction = '0';\n  }\n  if (fraction.length > baseLength) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');\n  }\n\n  while (fraction.length < baseLength) {\n    fraction += '0';\n  }\n\n  whole = new BN(whole);\n  fraction = new BN(fraction);\n  var wei = whole.mul(base).add(fraction); // eslint-disable-line\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  return new BN(wei.toString(10), 10);\n}\n\nmodule.exports = {\n  unitMap: unitMap,\n  numberToString: numberToString,\n  getValueOfUnit: getValueOfUnit,\n  fromWei: fromWei,\n  toWei: toWei\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$ethjs_unit$node_modules$bn_js$lib$bn","~$shadow.js","~$module$node_modules$number_to_bn$src$index"]],"~:properties",["^5",["toWei","getValueOfUnit","unitMap","numberToString","fromWei"]],"~:compiled-at",1644840879699,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$ethjs_unit$lib$index.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/ethjs-unit/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$ethjs_unit$lib$index\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar BN = require('bn.js');\\nvar numberToBN = require('number-to-bn');\\n\\nvar zero = new BN(0);\\nvar negative1 = new BN(-1);\\n\\n// complete ethereum unit map\\nvar unitMap = {\\n  'noether': '0', // eslint-disable-line\\n  'wei': '1', // eslint-disable-line\\n  'kwei': '1000', // eslint-disable-line\\n  'Kwei': '1000', // eslint-disable-line\\n  'babbage': '1000', // eslint-disable-line\\n  'femtoether': '1000', // eslint-disable-line\\n  'mwei': '1000000', // eslint-disable-line\\n  'Mwei': '1000000', // eslint-disable-line\\n  'lovelace': '1000000', // eslint-disable-line\\n  'picoether': '1000000', // eslint-disable-line\\n  'gwei': '1000000000', // eslint-disable-line\\n  'Gwei': '1000000000', // eslint-disable-line\\n  'shannon': '1000000000', // eslint-disable-line\\n  'nanoether': '1000000000', // eslint-disable-line\\n  'nano': '1000000000', // eslint-disable-line\\n  'szabo': '1000000000000', // eslint-disable-line\\n  'microether': '1000000000000', // eslint-disable-line\\n  'micro': '1000000000000', // eslint-disable-line\\n  'finney': '1000000000000000', // eslint-disable-line\\n  'milliether': '1000000000000000', // eslint-disable-line\\n  'milli': '1000000000000000', // eslint-disable-line\\n  'ether': '1000000000000000000', // eslint-disable-line\\n  'kether': '1000000000000000000000', // eslint-disable-line\\n  'grand': '1000000000000000000000', // eslint-disable-line\\n  'mether': '1000000000000000000000000', // eslint-disable-line\\n  'gether': '1000000000000000000000000000', // eslint-disable-line\\n  'tether': '1000000000000000000000000000000' };\\n\\n/**\\n * Returns value of unit in Wei\\n *\\n * @method getValueOfUnit\\n * @param {String} unit the unit to convert to, default ether\\n * @returns {BigNumber} value of the unit (in Wei)\\n * @throws error if the unit is not correct:w\\n */\\nfunction getValueOfUnit(unitInput) {\\n  var unit = unitInput ? unitInput.toLowerCase() : 'ether';\\n  var unitValue = unitMap[unit]; // eslint-disable-line\\n\\n  if (typeof unitValue !== 'string') {\\n    throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\\\\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));\\n  }\\n\\n  return new BN(unitValue, 10);\\n}\\n\\nfunction numberToString(arg) {\\n  if (typeof arg === 'string') {\\n    if (!arg.match(/^-?[0-9.]+$/)) {\\n      throw new Error('while converting number to string, invalid number value \\\\'' + arg + '\\\\', should be a number matching (^-?[0-9.]+).');\\n    }\\n    return arg;\\n  } else if (typeof arg === 'number') {\\n    return String(arg);\\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\\n    if (arg.toPrecision) {\\n      return String(arg.toPrecision());\\n    } else {\\n      // eslint-disable-line\\n      return arg.toString(10);\\n    }\\n  }\\n  throw new Error('while converting number to string, invalid number value \\\\'' + arg + '\\\\' type ' + typeof arg + '.');\\n}\\n\\nfunction fromWei(weiInput, unit, optionsInput) {\\n  var wei = numberToBN(weiInput); // eslint-disable-line\\n  var negative = wei.lt(zero); // eslint-disable-line\\n  var base = getValueOfUnit(unit);\\n  var baseLength = unitMap[unit].length - 1 || 1;\\n  var options = optionsInput || {};\\n\\n  if (negative) {\\n    wei = wei.mul(negative1);\\n  }\\n\\n  var fraction = wei.mod(base).toString(10); // eslint-disable-line\\n\\n  while (fraction.length < baseLength) {\\n    fraction = '0' + fraction;\\n  }\\n\\n  if (!options.pad) {\\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\\n  }\\n\\n  var whole = wei.div(base).toString(10); // eslint-disable-line\\n\\n  if (options.commify) {\\n    whole = whole.replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, ',');\\n  }\\n\\n  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line\\n\\n  if (negative) {\\n    value = '-' + value;\\n  }\\n\\n  return value;\\n}\\n\\nfunction toWei(etherInput, unit) {\\n  var ether = numberToString(etherInput); // eslint-disable-line\\n  var base = getValueOfUnit(unit);\\n  var baseLength = unitMap[unit].length - 1 || 1;\\n\\n  // Is it negative?\\n  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line\\n  if (negative) {\\n    ether = ether.substring(1);\\n  }\\n\\n  if (ether === '.') {\\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');\\n  }\\n\\n  // Split it into a whole and fractional part\\n  var comps = ether.split('.'); // eslint-disable-line\\n  if (comps.length > 2) {\\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');\\n  }\\n\\n  var whole = comps[0],\\n      fraction = comps[1]; // eslint-disable-line\\n\\n  if (!whole) {\\n    whole = '0';\\n  }\\n  if (!fraction) {\\n    fraction = '0';\\n  }\\n  if (fraction.length > baseLength) {\\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');\\n  }\\n\\n  while (fraction.length < baseLength) {\\n    fraction += '0';\\n  }\\n\\n  whole = new BN(whole);\\n  fraction = new BN(fraction);\\n  var wei = whole.mul(base).add(fraction); // eslint-disable-line\\n\\n  if (negative) {\\n    wei = wei.mul(negative1);\\n  }\\n\\n  return new BN(wei.toString(10), 10);\\n}\\n\\nmodule.exports = {\\n  unitMap: unitMap,\\n  numberToString: numberToString,\\n  getValueOfUnit: getValueOfUnit,\\n  fromWei: fromWei,\\n  toWei: toWei\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getValueOfUnit\",\"unitInput\",\"unit\",\"toLowerCase\",\"unitValue\",\"unitMap\",\"Error\",\"JSON\",\"stringify\",\"BN\",\"numberToString\",\"arg\",\"match\",\"String\",\"toString\",\"toTwos\",\"dividedToIntegerBy\",\"toPrecision\",\"numberToBN\",\"zero\",\"negative1\",\"fromWei\",\"weiInput\",\"optionsInput\",\"wei\",\"negative\",\"lt\",\"base\",\"baseLength\",\"length\",\"options\",\"mul\",\"fraction\",\"mod\",\"pad\",\"whole\",\"div\",\"commify\",\"replace\",\"value\",\"toWei\",\"etherInput\",\"ether\",\"substring\",\"comps\",\"split\",\"add\"]\n}\n"]