["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/elliptic/lib/elliptic/eddsa/index.js"],"~:js","shadow$provide.module$node_modules$elliptic$lib$elliptic$eddsa$index=function(global,require,module,exports){function EDDSA(curve){assert(\"ed25519\"===curve,\"only tested with ed25519 so far\");if(!(this instanceof EDDSA))return new EDDSA(curve);this.curve=curve=curves[curve].curve;this.g=curve.g;this.g.precompute(curve.n.bitLength()+1);this.pointClass=curve.point().constructor;this.encodingLength=Math.ceil(curve.n.bitLength()/8);this.hash=hash$jscomp$0.sha512}var hash$jscomp$0=require(\"module$node_modules$hash_DOT_js$lib$hash\"),\ncurves=require(\"module$node_modules$elliptic$lib$elliptic$curves\"),utils=require(\"module$node_modules$elliptic$lib$elliptic$utils\"),assert=utils.assert,parseBytes=utils.parseBytes,KeyPair=require(\"module$node_modules$elliptic$lib$elliptic$eddsa$key\"),Signature=require(\"module$node_modules$elliptic$lib$elliptic$eddsa$signature\");module.exports=EDDSA;EDDSA.prototype.sign=function(message,secret){message=parseBytes(message);var key=this.keyFromSecret(secret),r=this.hashInt(key.messagePrefix(),message);\nsecret=this.g.mul(r);var Rencoded=this.encodePoint(secret);message=this.hashInt(Rencoded,key.pubBytes(),message).mul(key.priv());message=r.add(message).umod(this.curve.n);return this.makeSignature({R:secret,S:message,Rencoded})};EDDSA.prototype.verify=function(message,sig,pub){message=parseBytes(message);sig=this.makeSignature(sig);pub=this.keyFromPublic(pub);message=this.hashInt(sig.Rencoded(),pub.pubBytes(),message);var SG=this.g.mul(sig.S());return sig.R().add(pub.pub().mul(message)).eq(SG)};EDDSA.prototype.hashInt=\nfunction(){for(var hash=this.hash(),i=0;i<arguments.length;i++)hash.update(arguments[i]);return utils.intFromLE(hash.digest()).umod(this.curve.n)};EDDSA.prototype.keyFromPublic=function(pub){return KeyPair.fromPublic(this,pub)};EDDSA.prototype.keyFromSecret=function(secret){return KeyPair.fromSecret(this,secret)};EDDSA.prototype.makeSignature=function(sig){return sig instanceof Signature?sig:new Signature(this,sig)};EDDSA.prototype.encodePoint=function(point){var enc=point.getY().toArray(\"le\",this.encodingLength);\nenc[this.encodingLength-1]|=point.getX().isOdd()?128:0;return enc};EDDSA.prototype.decodePoint=function(bytes){bytes=utils.parseBytes(bytes);var lastIx=bytes.length-1,normed=bytes.slice(0,lastIx).concat(bytes[lastIx]&-129);bytes=0!==(bytes[lastIx]&128);normed=utils.intFromLE(normed);return this.curve.pointFromY(normed,bytes)};EDDSA.prototype.encodeInt=function(num){return num.toArray(\"le\",this.encodingLength)};EDDSA.prototype.decodeInt=function(bytes){return utils.intFromLE(bytes)};EDDSA.prototype.isPoint=\nfunction(val){return val instanceof this.pointClass}}","~:source","shadow$provide[\"module$node_modules$elliptic$lib$elliptic$eddsa$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n    .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$elliptic$lib$elliptic$eddsa$key","~$module$node_modules$hash_DOT_js$lib$hash","~$module$node_modules$elliptic$lib$elliptic$eddsa$signature","~$module$node_modules$elliptic$lib$elliptic$curves","~$module$node_modules$elliptic$lib$elliptic$utils"]],"~:properties",["^5",["pointClass","makeSignature","curve","encodingLength","hash","encodePoint","S","keyFromPublic","decodePoint","verify","R","Rencoded","encodeInt","keyFromSecret","g","isPoint","sign","hashInt","decodeInt"]],"~:compiled-at",1644840880023,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$elliptic$lib$elliptic$eddsa$index.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/elliptic/lib/elliptic/eddsa/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$elliptic$lib$elliptic$eddsa$index\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar hash = require('hash.js');\\nvar curves = require('../curves');\\nvar utils = require('../utils');\\nvar assert = utils.assert;\\nvar parseBytes = utils.parseBytes;\\nvar KeyPair = require('./key');\\nvar Signature = require('./signature');\\n\\nfunction EDDSA(curve) {\\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\\n\\n  if (!(this instanceof EDDSA))\\n    return new EDDSA(curve);\\n\\n  curve = curves[curve].curve;\\n  this.curve = curve;\\n  this.g = curve.g;\\n  this.g.precompute(curve.n.bitLength() + 1);\\n\\n  this.pointClass = curve.point().constructor;\\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\\n  this.hash = hash.sha512;\\n}\\n\\nmodule.exports = EDDSA;\\n\\n/**\\n* @param {Array|String} message - message bytes\\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\\n* @returns {Signature} - signature\\n*/\\nEDDSA.prototype.sign = function sign(message, secret) {\\n  message = parseBytes(message);\\n  var key = this.keyFromSecret(secret);\\n  var r = this.hashInt(key.messagePrefix(), message);\\n  var R = this.g.mul(r);\\n  var Rencoded = this.encodePoint(R);\\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\\n    .mul(key.priv());\\n  var S = r.add(s_).umod(this.curve.n);\\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\\n};\\n\\n/**\\n* @param {Array} message - message bytes\\n* @param {Array|String|Signature} sig - sig bytes\\n* @param {Array|String|Point|KeyPair} pub - public key\\n* @returns {Boolean} - true if public key matches sig of message\\n*/\\nEDDSA.prototype.verify = function verify(message, sig, pub) {\\n  message = parseBytes(message);\\n  sig = this.makeSignature(sig);\\n  var key = this.keyFromPublic(pub);\\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\\n  var SG = this.g.mul(sig.S());\\n  var RplusAh = sig.R().add(key.pub().mul(h));\\n  return RplusAh.eq(SG);\\n};\\n\\nEDDSA.prototype.hashInt = function hashInt() {\\n  var hash = this.hash();\\n  for (var i = 0; i < arguments.length; i++)\\n    hash.update(arguments[i]);\\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\\n};\\n\\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\\n  return KeyPair.fromPublic(this, pub);\\n};\\n\\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\\n  return KeyPair.fromSecret(this, secret);\\n};\\n\\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\\n  if (sig instanceof Signature)\\n    return sig;\\n  return new Signature(this, sig);\\n};\\n\\n/**\\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\\n*\\n* EDDSA defines methods for encoding and decoding points and integers. These are\\n* helper convenience methods, that pass along to utility functions implied\\n* parameters.\\n*\\n*/\\nEDDSA.prototype.encodePoint = function encodePoint(point) {\\n  var enc = point.getY().toArray('le', this.encodingLength);\\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\\n  return enc;\\n};\\n\\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\\n  bytes = utils.parseBytes(bytes);\\n\\n  var lastIx = bytes.length - 1;\\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\\n\\n  var y = utils.intFromLE(normed);\\n  return this.curve.pointFromY(y, xIsOdd);\\n};\\n\\nEDDSA.prototype.encodeInt = function encodeInt(num) {\\n  return num.toArray('le', this.encodingLength);\\n};\\n\\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\\n  return utils.intFromLE(bytes);\\n};\\n\\nEDDSA.prototype.isPoint = function isPoint(val) {\\n  return val instanceof this.pointClass;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"EDDSA\",\"curve\",\"assert\",\"curves\",\"g\",\"precompute\",\"n\",\"bitLength\",\"pointClass\",\"point\",\"constructor\",\"encodingLength\",\"Math\",\"ceil\",\"hash\",\"sha512\",\"utils\",\"parseBytes\",\"KeyPair\",\"Signature\",\"prototype\",\"sign\",\"EDDSA.prototype.sign\",\"message\",\"secret\",\"key\",\"keyFromSecret\",\"r\",\"hashInt\",\"messagePrefix\",\"R\",\"mul\",\"Rencoded\",\"encodePoint\",\"s_\",\"pubBytes\",\"priv\",\"S\",\"add\",\"umod\",\"makeSignature\",\"verify\",\"EDDSA.prototype.verify\",\"sig\",\"pub\",\"keyFromPublic\",\"h\",\"SG\",\"RplusAh\",\"eq\",\"EDDSA.prototype.hashInt\",\"i\",\"arguments\",\"length\",\"update\",\"intFromLE\",\"digest\",\"EDDSA.prototype.keyFromPublic\",\"fromPublic\",\"EDDSA.prototype.keyFromSecret\",\"fromSecret\",\"EDDSA.prototype.makeSignature\",\"EDDSA.prototype.encodePoint\",\"enc\",\"getY\",\"toArray\",\"getX\",\"isOdd\",\"decodePoint\",\"EDDSA.prototype.decodePoint\",\"bytes\",\"lastIx\",\"normed\",\"slice\",\"concat\",\"xIsOdd\",\"y\",\"pointFromY\",\"encodeInt\",\"EDDSA.prototype.encodeInt\",\"num\",\"decodeInt\",\"EDDSA.prototype.decodeInt\",\"isPoint\",\"EDDSA.prototype.isPoint\",\"val\"]\n}\n"]