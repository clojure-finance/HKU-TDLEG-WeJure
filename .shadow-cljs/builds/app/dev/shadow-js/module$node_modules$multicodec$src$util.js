["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/multicodec/src/util.js"],"~:js","shadow$provide.module$node_modules$multicodec$src$util=function(global,require,module,exports){function bufferToNumber(buf){return parseInt(buf.toString(\"hex\"),16)}function numberToBuffer(num){num=num.toString(16);1===num.length%2&&(num=\"0\"+num);return Buffer.from(num,\"hex\")}var Buffer=require(\"module$node_modules$buffer$index\").Buffer;\"use strict\";const varint=require(\"module$node_modules$varint$index\");module.exports={numberToBuffer,bufferToNumber,varintBufferEncode:function(input){return Buffer.from(varint.encode(bufferToNumber(input)))},\nvarintBufferDecode:function(input){return numberToBuffer(varint.decode(input))},varintEncode:function(num){return Buffer.from(varint.encode(num))}}}","~:source","shadow$provide[\"module$node_modules$multicodec$src$util\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict'\nconst varint = require('varint')\n\nmodule.exports = {\n  numberToBuffer,\n  bufferToNumber,\n  varintBufferEncode,\n  varintBufferDecode,\n  varintEncode\n}\n\nfunction bufferToNumber (buf) {\n  return parseInt(buf.toString('hex'), 16)\n}\n\nfunction numberToBuffer (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return Buffer.from(hexString, 'hex')\n}\n\nfunction varintBufferEncode (input) {\n  return Buffer.from(varint.encode(bufferToNumber(input)))\n}\n\nfunction varintBufferDecode (input) {\n  return numberToBuffer(varint.decode(input))\n}\n\nfunction varintEncode (num) {\n  return Buffer.from(varint.encode(num))\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$varint$index","~$shadow.js","~$module$node_modules$buffer$index"]],"~:properties",["^5",["varintBufferEncode","numberToBuffer","bufferToNumber","varintBufferDecode","varintEncode"]],"~:compiled-at",1644840880221,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$multicodec$src$util.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAapGC,QAASA,eAAe,CAACC,GAAD,CAAM,CAC5B,MAAOC,SAAA,CAASD,GAAIE,CAAAA,QAAJ,CAAa,KAAb,CAAT,CAA8B,EAA9B,CADqB,CAI9BC,QAASA,eAAe,CAACC,GAAD,CAAM,CACxBC,GAAAA,CAAYD,GAAIF,CAAAA,QAAJ,CAAa,EAAb,CACa,EAA7B,GAAIG,GAAUC,CAAAA,MAAd,CAAuB,CAAvB,GACED,GADF,CACc,GADd,CACoBA,GADpB,CAGA,OAAOE,OAAOC,CAAAA,IAAP,CAAYH,GAAZ,CAAuB,KAAvB,CALqB,CAhB9B,IAAIE,OAASX,OAAA,CAAQ,kCAAR,CAAkBW,CAAAA,MAC/B,aACA,OAAME,OAASb,OAAA,CAAQ,kCAAR,CAEfC,OAAOC,CAAAA,OAAP,CAAiB,CACfK,cADe,CAEfJ,cAFe,CAGfW,mBAiBFA,QAA4B,CAACC,KAAD,CAAQ,CAClC,MAAOJ,OAAOC,CAAAA,IAAP,CAAYC,MAAOG,CAAAA,MAAP,CAAcb,cAAA,CAAeY,KAAf,CAAd,CAAZ,CAD2B,CApBnB;AAIfE,mBAoBFA,QAA4B,CAACF,KAAD,CAAQ,CAClC,MAAOR,eAAA,CAAeM,MAAOK,CAAAA,MAAP,CAAcH,KAAd,CAAf,CAD2B,CAxBnB,CAKfI,aAuBFA,QAAsB,CAACX,GAAD,CAAM,CAC1B,MAAOG,OAAOC,CAAAA,IAAP,CAAYC,MAAOG,CAAAA,MAAP,CAAcR,GAAd,CAAZ,CADmB,CA5BX,CALmF;\",\n\"sources\":[\"node_modules/multicodec/src/util.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$multicodec$src$util\\\"] = function(global,require,module,exports) {\\nvar Buffer = require('buffer').Buffer;\\n'use strict'\\nconst varint = require('varint')\\n\\nmodule.exports = {\\n  numberToBuffer,\\n  bufferToNumber,\\n  varintBufferEncode,\\n  varintBufferDecode,\\n  varintEncode\\n}\\n\\nfunction bufferToNumber (buf) {\\n  return parseInt(buf.toString('hex'), 16)\\n}\\n\\nfunction numberToBuffer (num) {\\n  let hexString = num.toString(16)\\n  if (hexString.length % 2 === 1) {\\n    hexString = '0' + hexString\\n  }\\n  return Buffer.from(hexString, 'hex')\\n}\\n\\nfunction varintBufferEncode (input) {\\n  return Buffer.from(varint.encode(bufferToNumber(input)))\\n}\\n\\nfunction varintBufferDecode (input) {\\n  return numberToBuffer(varint.decode(input))\\n}\\n\\nfunction varintEncode (num) {\\n  return Buffer.from(varint.encode(num))\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"bufferToNumber\",\"buf\",\"parseInt\",\"toString\",\"numberToBuffer\",\"num\",\"hexString\",\"length\",\"Buffer\",\"from\",\"varint\",\"varintBufferEncode\",\"input\",\"encode\",\"varintBufferDecode\",\"decode\",\"varintEncode\"]\n}\n"]