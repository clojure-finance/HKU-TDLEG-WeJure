["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/system/cssVars/createGetCssVar.js"],"~:js","shadow$provide.module$node_modules$$mui$system$cssVars$createGetCssVar=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(prefix=\"\"){function appendVar(...vars){return vars.length?`, var(--${prefix?`${prefix}-`:\"\"}${vars[0]}${appendVar(...vars.slice(1))})`:\"\"}return(field,...vars)=>`var(--${prefix?`${prefix}-`:\"\"}${field}${appendVar(...vars)})`}}","~:source","shadow$provide[\"module$node_modules$$mui$system$cssVars$createGetCssVar\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nfunction createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n\n    return `, var(--${prefix ? `${prefix}-` : ''}${vars[0]}${appendVar(...vars.slice(1))})`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = (field, ...vars) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\n  };\n\n  return getCssVar;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1644840880604,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$system$cssVars$createGetCssVar.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAMAC,QAAwB,CAACC,MAAA,CAAS,EAAV,CAAc,CACpCC,QAASA,UAAS,CAAC,GAAGC,IAAJ,CAAU,CAC1B,MAAKA,KAAKC,CAAAA,MAAV,CAIO,WAAWH,MAAA,CAAS,GAAGA,MAAH,GAAT,CAAwB,EAAnC,GAAwCE,IAAA,CAAK,CAAL,CAAxC,GAAkDD,SAAA,CAAU,GAAGC,IAAKE,CAAAA,KAAL,CAAW,CAAX,CAAb,CAAlD,GAJP,CACS,EAFiB,CAa5B,MAJkB,CAACC,KAAD,CAAQ,GAAGH,IAAX,CAAAI,EACT,SAASN,MAAA,CAAS,GAAGA,MAAH,GAAT,CAAwB,EAAjC,GAAsCK,KAAtC,GAA8CJ,SAAA,CAAU,GAAGC,IAAb,CAA9C,GAX2B,CAZ8E;\",\n\"sources\":[\"node_modules/@mui/system/cssVars/createGetCssVar.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$system$cssVars$createGetCssVar\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = createGetCssVar;\\n\\n/**\\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\\n * and they does not need to remember the prefix (defined once).\\n */\\nfunction createGetCssVar(prefix = '') {\\n  function appendVar(...vars) {\\n    if (!vars.length) {\\n      return '';\\n    }\\n\\n    return `, var(--${prefix ? `${prefix}-` : ''}${vars[0]}${appendVar(...vars.slice(1))})`;\\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\\n\\n\\n  const getCssVar = (field, ...vars) => {\\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\\n  };\\n\\n  return getCssVar;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"createGetCssVar\",\"prefix\",\"appendVar\",\"vars\",\"length\",\"slice\",\"field\",\"getCssVar\"]\n}\n"]