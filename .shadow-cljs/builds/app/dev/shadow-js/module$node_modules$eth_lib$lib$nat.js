["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/eth-lib/lib/nat.js"],"~:js","shadow$provide.module$node_modules$eth_lib$lib$nat=function(global,require,module,exports){const BN=require(\"module$node_modules$bn_DOT_js$lib$bn\"),Bytes=require(\"module$node_modules$eth_lib$lib$bytes\"),fromString=str=>{str=\"0x\"+(\"0x\"===str.slice(0,2)?new BN(str.slice(2),16):new BN(str,10)).toString(\"hex\");return\"0x0\"===str?\"0x\":str},fromNumber=a=>\"string\"===typeof a?/^0x/.test(a)?a:\"0x\"+a:\"0x\"+(new BN(a)).toString(\"hex\");require=method=>(a,b)=>\"0x\"+(new BN(a.slice(2),16))[method](new BN(b.slice(2),\n16)).toString(\"hex\");global=require(\"add\");const mul=require(\"mul\"),div=require(\"div\");require=require(\"sub\");module.exports={toString:a=>(new BN(a.slice(2),16)).toString(10),fromString,toNumber:a=>(new BN(a.slice(2),16)).toNumber(),fromNumber,toEther:wei=>(new BN(div(wei,fromString(\"10000000000\")).slice(2),16)).toNumber()/1E8,fromEther:eth=>mul(fromNumber(Math.floor(1E8*eth)),fromString(\"10000000000\")),toUint256:a=>Bytes.pad(32,a),add:global,mul,div,sub:require}}","~:source","shadow$provide[\"module$node_modules$eth_lib$lib$nat\"] = function(global,require,module,exports) {\nconst BN = require(\"bn.js\");\nconst Bytes = require(\"./bytes\");\n\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\n\nconst toBN = str => new BN(str.slice(2), 16);\n\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n\nconst toString = a => toBN(a).toString(10);\n\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n\nconst toNumber = a => toBN(a).toNumber();\n\nconst toUint256 = a => Bytes.pad(32, a);\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\n\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\n\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$eth_lib$lib$bytes","~$shadow.js","~$module$node_modules$bn_DOT_js$lib$bn"]],"~:properties",["^5",["toUint256","fromNumber","sub","fromEther","fromString","toString","toEther","mul","div","add","toNumber"]],"~:compiled-at",1644840880262,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$eth_lib$lib$nat.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,mCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAChG,MAAMC,GAAKH,OAAA,CAAQ,sCAAR,CAAX,CACMI,MAAQJ,OAAA,CAAQ,uCAAR,CADd,CAOMK,WAAaC,GAAAD,EAAO,CAClBE,GAAAA,CAAK,IAALA,CAAoFC,CAAnD,IAApB,GAAAF,GAAIG,CAAAA,KAAJ,CAAU,CAAV,CAAa,CAAb,CAAA,CAA2B,IAAIN,EAAJ,CAAOG,GAAIG,CAAAA,KAAJ,CAAU,CAAV,CAAP,CAAqB,EAArB,CAA3B,CAAsD,IAAIN,EAAJ,CAAOG,GAAP,CAAY,EAAZ,CAAiBE,EAAAA,QAAxE,CAAiF,KAAjF,CAClB,OAAc,KAAP,GAAAD,GAAA,CAAe,IAAf,CAAsBA,GAFL,CAP1B,CAkBMG,WAAaC,CAAAD,EAAkB,QAAb,GAAA,MAAOC,EAAP,CAAwB,KAAMC,CAAAA,IAAN,CAAWD,CAAX,CAAA,CAAgBA,CAAhB,CAAoB,IAApB,CAA2BA,CAAnD,CAAuD,IAAvD,CAAwEH,CAAV,IAAIL,EAAJ,CAAOQ,CAAP,CAAUH,EAAAA,QAAV,CAAmB,KAAnB,CAMhFK,QAAAA,CAAMC,MAAAD,EAAU,CAACF,CAAD,CAAII,CAAJ,CAAA,EArBD,IAqBC,CAAiB,CAnBnB,IAAIZ,EAAJ,CAmBwBQ,CAnBbF,CAAAA,KAAJ,CAAU,CAAV,CAAP,CAAqB,EAArB,CAmBmB,EAAQK,MAAR,CAAAP,CAnBnB,IAAIJ,EAAJ,CAmBwCY,CAnB7BN,CAAAA,KAAJ,CAAU,CAAV,CAAP;AAAqB,EAArB,CAmBmBF,CArBRC,CAAAA,QAAH,CAAY,KAAZ,CAuBtBQ,OAAAA,CAAMH,OAAA,CAAI,KAAJ,CACZ,OAAMI,IAAMJ,OAAA,CAAI,KAAJ,CAAZ,CACMK,IAAML,OAAA,CAAI,KAAJ,CACNM,QAAAA,CAAMN,OAAA,CAAI,KAAJ,CAEZZ,OAAOC,CAAAA,OAAP,CAAiB,CACfM,SAhBeG,CAAAH,EAAaA,CAXV,IAAIL,EAAJ,CAWOQ,CAXIF,CAAAA,KAAJ,CAAU,CAAV,CAAP,CAAqB,EAArB,CAWUD,EAAAA,QAAR,CAAiB,EAAjB,CAeL,CAEfH,UAFe,CAGfe,SAdeT,CAAAS,EAAaA,CAfV,IAAIjB,EAAJ,CAeOQ,CAfIF,CAAAA,KAAJ,CAAU,CAAV,CAAP,CAAqB,EAArB,CAeUW,EAAAA,QAAR,EAWL,CAIfV,UAJe,CAKfW,QAxBcC,GAAAD,EAQcD,CAfV,IAAIjB,EAAJ,CAOYe,GAAAP,CAAIW,GAAJX,CAASN,UAAA,CAAW,aAAX,CAATM,CAPDF,CAAAA,KAAJ,CAAU,CAAV,CAAP,CAAqB,EAArB,CAeUW,EAAAA,QAAR,EARNC,CAAuD,GAmBtD,CAMfE,UAvBgBC,GAAAD,EAAON,GAAA,CAAIP,UAAA,CAAWe,IAAKC,CAAAA,KAAL,CAAiB,GAAjB,CAAWF,GAAX,CAAX,CAAJ,CAA6CnB,UAAA,CAAW,aAAX,CAA7C,CAiBR,CAOfsB,UAhBgBhB,CAAAgB,EAAKvB,KAAMwB,CAAAA,GAAN,CAAU,EAAV,CAAcjB,CAAd,CASN,CAQfK,IAAAA,MARe,CASfC,GATe,CAUfC,GAVe,CAWfC,IAAAA,OAXe,CAhC+E;\",\n\"sources\":[\"node_modules/eth-lib/lib/nat.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$eth_lib$lib$nat\\\"] = function(global,require,module,exports) {\\nconst BN = require(\\\"bn.js\\\");\\nconst Bytes = require(\\\"./bytes\\\");\\n\\nconst fromBN = bn => \\\"0x\\\" + bn.toString(\\\"hex\\\");\\n\\nconst toBN = str => new BN(str.slice(2), 16);\\n\\nconst fromString = str => {\\n  const bn = \\\"0x\\\" + (str.slice(0, 2) === \\\"0x\\\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\\\"hex\\\");\\n  return bn === \\\"0x0\\\" ? \\\"0x\\\" : bn;\\n};\\n\\nconst toEther = wei => toNumber(div(wei, fromString(\\\"10000000000\\\"))) / 100000000;\\n\\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\\\"10000000000\\\"));\\n\\nconst toString = a => toBN(a).toString(10);\\n\\nconst fromNumber = a => typeof a === \\\"string\\\" ? /^0x/.test(a) ? a : \\\"0x\\\" + a : \\\"0x\\\" + new BN(a).toString(\\\"hex\\\");\\n\\nconst toNumber = a => toBN(a).toNumber();\\n\\nconst toUint256 = a => Bytes.pad(32, a);\\n\\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\\n\\nconst add = bin(\\\"add\\\");\\nconst mul = bin(\\\"mul\\\");\\nconst div = bin(\\\"div\\\");\\nconst sub = bin(\\\"sub\\\");\\n\\nmodule.exports = {\\n  toString,\\n  fromString,\\n  toNumber,\\n  fromNumber,\\n  toEther,\\n  fromEther,\\n  toUint256,\\n  add,\\n  mul,\\n  div,\\n  sub\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"BN\",\"Bytes\",\"fromString\",\"str\",\"bn\",\"toString\",\"slice\",\"fromNumber\",\"a\",\"test\",\"bin\",\"method\",\"b\",\"add\",\"mul\",\"div\",\"sub\",\"toNumber\",\"toEther\",\"wei\",\"fromEther\",\"eth\",\"Math\",\"floor\",\"toUint256\",\"pad\"]\n}\n"]