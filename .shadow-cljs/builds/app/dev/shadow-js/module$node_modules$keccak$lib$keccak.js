["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/keccak/lib/keccak.js"],"~:js","shadow$provide.module$node_modules$keccak$lib$keccak=function(global,require,module,exports){function Keccak(){this.state=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];this.blockSize=null;this.count=0;this.squeezing=!1}var Buffer=require(\"module$node_modules$buffer$index\").Buffer;const keccakState=require(\"module$node_modules$keccak$lib$keccak_state_unroll\");Keccak.prototype.initialize=function(rate,capacity){for(capacity=0;50>capacity;++capacity)this.state[capacity]=0;this.blockSize=rate/8;\nthis.count=0;this.squeezing=!1};Keccak.prototype.absorb=function(data){for(let i=0;i<data.length;++i)this.state[~~(this.count/4)]^=data[i]<<this.count%4*8,this.count+=1,this.count===this.blockSize&&(keccakState.p1600(this.state),this.count=0)};Keccak.prototype.absorbLastFewBits=function(bits){this.state[~~(this.count/4)]^=bits<<this.count%4*8;0!==(bits&128)&&this.count===this.blockSize-1&&keccakState.p1600(this.state);this.state[~~((this.blockSize-1)/4)]^=128<<(this.blockSize-1)%4*8;keccakState.p1600(this.state);\nthis.count=0;this.squeezing=!0};Keccak.prototype.squeeze=function(length){this.squeezing||this.absorbLastFewBits(1);const output=Buffer.alloc(length);for(let i=0;i<length;++i)output[i]=this.state[~~(this.count/4)]>>>this.count%4*8&255,this.count+=1,this.count===this.blockSize&&(keccakState.p1600(this.state),this.count=0);return output};Keccak.prototype.copy=function(dest){for(let i=0;50>i;++i)dest.state[i]=this.state[i];dest.blockSize=this.blockSize;dest.count=this.count;dest.squeezing=this.squeezing};\nmodule.exports=Keccak}","~:source","shadow$provide[\"module$node_modules$keccak$lib$keccak\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\nconst keccakState = require('./keccak-state-unroll')\n\nfunction Keccak () {\n  // much faster than `new Array(50)`\n  this.state = [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0\n  ]\n\n  this.blockSize = null\n  this.count = 0\n  this.squeezing = false\n}\n\nKeccak.prototype.initialize = function (rate, capacity) {\n  for (let i = 0; i < 50; ++i) this.state[i] = 0\n  this.blockSize = rate / 8\n  this.count = 0\n  this.squeezing = false\n}\n\nKeccak.prototype.absorb = function (data) {\n  for (let i = 0; i < data.length; ++i) {\n    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))\n    this.count += 1\n    if (this.count === this.blockSize) {\n      keccakState.p1600(this.state)\n      this.count = 0\n    }\n  }\n}\n\nKeccak.prototype.absorbLastFewBits = function (bits) {\n  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))\n  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)\n  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))\n  keccakState.p1600(this.state)\n  this.count = 0\n  this.squeezing = true\n}\n\nKeccak.prototype.squeeze = function (length) {\n  if (!this.squeezing) this.absorbLastFewBits(0x01)\n\n  const output = Buffer.alloc(length)\n  for (let i = 0; i < length; ++i) {\n    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff\n    this.count += 1\n    if (this.count === this.blockSize) {\n      keccakState.p1600(this.state)\n      this.count = 0\n    }\n  }\n\n  return output\n}\n\nKeccak.prototype.copy = function (dest) {\n  for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i]\n  dest.blockSize = this.blockSize\n  dest.count = this.count\n  dest.squeezing = this.squeezing\n}\n\nmodule.exports = Keccak\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$keccak$lib$keccak_state_unroll","~$module$node_modules$buffer$index"]],"~:properties",["^5",["squeeze","copy","absorbLastFewBits","count","absorb","blockSize","initialize","state","squeezing"]],"~:compiled-at",1644840880069,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$keccak$lib$keccak.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/keccak/lib/keccak.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$keccak$lib$keccak\\\"] = function(global,require,module,exports) {\\nvar Buffer = require('buffer').Buffer;\\nconst keccakState = require('./keccak-state-unroll')\\n\\nfunction Keccak () {\\n  // much faster than `new Array(50)`\\n  this.state = [\\n    0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 0,\\n    0, 0, 0, 0, 0\\n  ]\\n\\n  this.blockSize = null\\n  this.count = 0\\n  this.squeezing = false\\n}\\n\\nKeccak.prototype.initialize = function (rate, capacity) {\\n  for (let i = 0; i < 50; ++i) this.state[i] = 0\\n  this.blockSize = rate / 8\\n  this.count = 0\\n  this.squeezing = false\\n}\\n\\nKeccak.prototype.absorb = function (data) {\\n  for (let i = 0; i < data.length; ++i) {\\n    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))\\n    this.count += 1\\n    if (this.count === this.blockSize) {\\n      keccakState.p1600(this.state)\\n      this.count = 0\\n    }\\n  }\\n}\\n\\nKeccak.prototype.absorbLastFewBits = function (bits) {\\n  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))\\n  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)\\n  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))\\n  keccakState.p1600(this.state)\\n  this.count = 0\\n  this.squeezing = true\\n}\\n\\nKeccak.prototype.squeeze = function (length) {\\n  if (!this.squeezing) this.absorbLastFewBits(0x01)\\n\\n  const output = Buffer.alloc(length)\\n  for (let i = 0; i < length; ++i) {\\n    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff\\n    this.count += 1\\n    if (this.count === this.blockSize) {\\n      keccakState.p1600(this.state)\\n      this.count = 0\\n    }\\n  }\\n\\n  return output\\n}\\n\\nKeccak.prototype.copy = function (dest) {\\n  for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i]\\n  dest.blockSize = this.blockSize\\n  dest.count = this.count\\n  dest.squeezing = this.squeezing\\n}\\n\\nmodule.exports = Keccak\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Keccak\",\"state\",\"blockSize\",\"count\",\"squeezing\",\"Buffer\",\"keccakState\",\"prototype\",\"initialize\",\"Keccak.prototype.initialize\",\"rate\",\"capacity\",\"i\",\"absorb\",\"Keccak.prototype.absorb\",\"data\",\"length\",\"p1600\",\"absorbLastFewBits\",\"Keccak.prototype.absorbLastFewBits\",\"bits\",\"squeeze\",\"Keccak.prototype.squeeze\",\"output\",\"alloc\",\"copy\",\"Keccak.prototype.copy\",\"dest\"]\n}\n"]