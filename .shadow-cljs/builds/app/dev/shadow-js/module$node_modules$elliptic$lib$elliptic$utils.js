["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/elliptic/lib/elliptic/utils.js"],"~:js","shadow$provide.module$node_modules$elliptic$lib$elliptic$utils=function(global,require,module,exports){var BN=require(\"module$node_modules$bn_DOT_js$lib$bn\");global=require(\"module$node_modules$minimalistic_assert$index\");require=require(\"module$node_modules$minimalistic_crypto_utils$lib$utils\");exports.assert=global;exports.toArray=require.toArray;exports.zero2=require.zero2;exports.toHex=require.toHex;exports.encode=require.encode;exports.getNAF=function(num,w,bits){bits=Array(Math.max(num.bitLength(),\nbits)+1);bits.fill(0);w=1<<w+1;num=num.clone();for(var i=0;i<bits.length;i++){var z=num.andln(w-1);num.isOdd()?(z=z>(w>>1)-1?(w>>1)-z:z,num.isubn(z)):z=0;bits[i]=z;num.iushrn(1)}return bits};exports.getJSF=function(k1,k2){var jsf=[[],[]];k1=k1.clone();k2=k2.clone();for(var d1=0,d2=0,m8;0<k1.cmpn(-d1)||0<k2.cmpn(-d2);){var m14=k1.andln(3)+d1&3,m24=k2.andln(3)+d2&3;3===m14&&(m14=-1);3===m24&&(m24=-1);if(0===(m14&1))var u1=0;else m8=k1.andln(7)+d1&7,u1=3!==m8&&5!==m8||2!==m24?m14:-m14;jsf[0].push(u1);\n0===(m24&1)?m8=0:(m8=k2.andln(7)+d2&7,m8=3!==m8&&5!==m8||2!==m14?m24:-m24);jsf[1].push(m8);2*d1===u1+1&&(d1=1-d1);2*d2===m8+1&&(d2=1-d2);k1.iushrn(1);k2.iushrn(1)}return jsf};exports.cachedProperty=function(obj,name,computer){var key=\"_\"+name;obj.prototype[name]=function(){return void 0!==this[key]?this[key]:this[key]=computer.call(this)}};exports.parseBytes=function(bytes){return\"string\"===typeof bytes?exports.toArray(bytes,\"hex\"):bytes};exports.intFromLE=function(bytes){return new BN(bytes,\"hex\",\n\"le\")}}","~:source","shadow$provide[\"module$node_modules$elliptic$lib$elliptic$utils\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    [],\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  var m8;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n      this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n    bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$minimalistic_assert$index","~$module$node_modules$minimalistic_crypto_utils$lib$utils","~$module$node_modules$bn_DOT_js$lib$bn"]],"~:properties",["^5",["getNAF","parseBytes","cachedProperty","toHex","zero2","getJSF","intFromLE","toArray","encode","assert"]],"~:compiled-at",1644840879825,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$elliptic$lib$elliptic$utils.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAI5G,IAAIC,GAAKH,OAAA,CAAQ,sCAAR,CACLI,OAAAA,CAAYJ,OAAA,CAAQ,+CAAR,CACZK,QAAAA,CAAWL,OAAA,CAAQ,yDAAR,CAHHE,QAKNI,CAAAA,MAAN,CAAeF,MALHF,QAMNK,CAAAA,OAAN,CAAgBF,OAASE,CAAAA,OANbL,QAONM,CAAAA,KAAN,CAAcH,OAASG,CAAAA,KAPXN,QAQNO,CAAAA,KAAN,CAAcJ,OAASI,CAAAA,KARXP,QASNQ,CAAAA,MAAN,CAAeL,OAASK,CAAAA,MATZR,QAsCNS,CAAAA,MAAN,CA1BAA,QAAe,CAACC,GAAD,CAAMC,CAAN,CAASC,IAAT,CAAe,CACxBC,IAAAA,CAAUC,KAAJ,CAAUC,IAAKC,CAAAA,GAAL,CAASN,GAAIO,CAAAA,SAAJ,EAAT;AAA0BL,IAA1B,CAAV,CAA4C,CAA5C,CACVC,KAAIK,CAAAA,IAAJ,CAAS,CAAT,CAEIC,EAAAA,CAAK,CAALA,EAAWR,CAAXQ,CAAe,CACfC,IAAAA,CAAIV,GAAIW,CAAAA,KAAJ,EAER,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBT,IAAIU,CAAAA,MAAxB,CAAgCD,CAAA,EAAhC,CAAqC,CAE/BE,IAAAA,EAAMJ,GAAEK,CAAAA,KAAF,CAAQN,CAAR,CAAa,CAAb,CACNC,IAAEM,CAAAA,KAAF,EAAJ,EAEIC,CAGF,CAJIH,CAAJ,EAAWL,CAAX,EAAiB,CAAjB,EAAsB,CAAtB,EACOA,CADP,EACa,CADb,EACkBK,CADlB,CAGMA,CACN,CAAAJ,GAAEQ,CAAAA,KAAF,CAAQD,CAAR,CALF,EAOEA,CAPF,CAOM,CAGNd,KAAA,CAAIS,CAAJ,CAAA,CAASK,CACTP,IAAES,CAAAA,MAAF,CAAS,CAAT,CAdmC,CAiBrC,MAAOhB,KAxBqB,CAZlBb,QA+FN8B,CAAAA,MAAN,CAtDAA,QAAe,CAACC,EAAD,CAAKC,EAAL,CAAS,CACtB,IAAIC,IAAM,CACR,EADQ,CAER,EAFQ,CAKVF,GAAA,CAAKA,EAAGV,CAAAA,KAAH,EACLW,GAAA,CAAKA,EAAGX,CAAAA,KAAH,EAIL,KAHA,IAAIa,GAAK,CAAT,CACIC,GAAK,CADT,CAEIC,EACJ,CAAsB,CAAtB,CAAOL,EAAGM,CAAAA,IAAH,CAAQ,CAACH,EAAT,CAAP,EAA0C,CAA1C,CAA2BF,EAAGK,CAAAA,IAAH,CAAQ,CAACF,EAAT,CAA3B,CAAA,CAA6C,CAE3C,IAAIG,IAAOP,EAAGN,CAAAA,KAAH,CAAS,CAAT,CAAPa,CAAqBJ,EAArBI,CAA2B,CAA/B,CACIC,IAAOP,EAAGP,CAAAA,KAAH,CAAS,CAAT,CAAPc,CAAqBJ,EAArBI,CAA2B,CACnB,EAAZ,GAAID,GAAJ,GACEA,GADF,CACQ,CAAC,CADT,CAEY,EAAZ,GAAIC,GAAJ,GACEA,GADF,CACQ,CAAC,CADT,CAGA,IAAkB,CAAlB,IAAKD,GAAL,CAAW,CAAX,EACE,IAAAE,GAAK,CADP,KAGEJ,GAIE,CAJIL,EAAGN,CAAAA,KAAH,CAAS,CAAT,CAIJ,CAJkBS,EAIlB,CAJwB,CAIxB,CAAAM,EAAA,CAHU,CAAZ,GAAKJ,EAAL,EAAwB,CAAxB,GAAiBA,EAAjB,EAAsC,CAAtC,GAA8BG,GAA9B,CAGOD,GAHP,CACO,CAACA,GAIVL,IAAA,CAAI,CAAJ,CAAOQ,CAAAA,IAAP,CAAYD,EAAZ,CAGkB;CAAlB,IAAKD,GAAL,CAAW,CAAX,EACEG,EADF,CACO,CADP,EAGEN,EAIE,CAJIJ,EAAGP,CAAAA,KAAH,CAAS,CAAT,CAIJ,CAJkBU,EAIlB,CAJwB,CAIxB,CAAAO,EAAA,CAHU,CAAZ,GAAKN,EAAL,EAAwB,CAAxB,GAAiBA,EAAjB,EAAsC,CAAtC,GAA8BE,GAA9B,CAGOC,GAHP,CACO,CAACA,GALV,CASAN,IAAA,CAAI,CAAJ,CAAOQ,CAAAA,IAAP,CAAYC,EAAZ,CAGI,EAAJ,CAAQR,EAAR,GAAeM,EAAf,CAAoB,CAApB,GACEN,EADF,CACO,CADP,CACWA,EADX,CAEI,EAAJ,CAAQC,EAAR,GAAeO,EAAf,CAAoB,CAApB,GACEP,EADF,CACO,CADP,CACWA,EADX,CAEAJ,GAAGF,CAAAA,MAAH,CAAU,CAAV,CACAG,GAAGH,CAAAA,MAAH,CAAU,CAAV,CAtC2C,CAyC7C,MAAOI,IApDe,CAzCZjC,QAwGN2C,CAAAA,cAAN,CAPAA,QAAuB,CAACC,GAAD,CAAMC,IAAN,CAAYC,QAAZ,CAAsB,CAC3C,IAAIC,IAAM,GAANA,CAAYF,IAChBD,IAAII,CAAAA,SAAJ,CAAcH,IAAd,CAAA,CAAsB,QAAuB,EAAG,CAC9C,MAAqBI,KAAAA,EAAd,GAAA,IAAA,CAAKF,GAAL,CAAA,CAA0B,IAAA,CAAKA,GAAL,CAA1B,CACL,IAAA,CAAKA,GAAL,CADK,CACOD,QAASI,CAAAA,IAAT,CAAc,IAAd,CAFgC,CAFL,CAjGjClD,QA8GNmD,CAAAA,UAAN,CAJAA,QAAmB,CAACC,KAAD,CAAQ,CACzB,MAAwB,QAAjB,GAAA,MAAOA,MAAP,CA3GGpD,OA2G+BK,CAAAA,OAAN,CAAc+C,KAAd,CAAqB,KAArB,CAA5B,CACLA,KAFuB,CA1GfpD,QAmHNqD,CAAAA,SAAN,CAHAA,QAAkB,CAACD,KAAD,CAAQ,CACxB,MAAO,KAAInD,EAAJ,CAAOmD,KAAP,CAAc,KAAd;AAAqB,IAArB,CADiB,CAnHkF;\",\n\"sources\":[\"node_modules/elliptic/lib/elliptic/utils.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$elliptic$lib$elliptic$utils\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar utils = exports;\\nvar BN = require('bn.js');\\nvar minAssert = require('minimalistic-assert');\\nvar minUtils = require('minimalistic-crypto-utils');\\n\\nutils.assert = minAssert;\\nutils.toArray = minUtils.toArray;\\nutils.zero2 = minUtils.zero2;\\nutils.toHex = minUtils.toHex;\\nutils.encode = minUtils.encode;\\n\\n// Represent num in a w-NAF form\\nfunction getNAF(num, w, bits) {\\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\\n  naf.fill(0);\\n\\n  var ws = 1 << (w + 1);\\n  var k = num.clone();\\n\\n  for (var i = 0; i < naf.length; i++) {\\n    var z;\\n    var mod = k.andln(ws - 1);\\n    if (k.isOdd()) {\\n      if (mod > (ws >> 1) - 1)\\n        z = (ws >> 1) - mod;\\n      else\\n        z = mod;\\n      k.isubn(z);\\n    } else {\\n      z = 0;\\n    }\\n\\n    naf[i] = z;\\n    k.iushrn(1);\\n  }\\n\\n  return naf;\\n}\\nutils.getNAF = getNAF;\\n\\n// Represent k1, k2 in a Joint Sparse Form\\nfunction getJSF(k1, k2) {\\n  var jsf = [\\n    [],\\n    [],\\n  ];\\n\\n  k1 = k1.clone();\\n  k2 = k2.clone();\\n  var d1 = 0;\\n  var d2 = 0;\\n  var m8;\\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\\n    // First phase\\n    var m14 = (k1.andln(3) + d1) & 3;\\n    var m24 = (k2.andln(3) + d2) & 3;\\n    if (m14 === 3)\\n      m14 = -1;\\n    if (m24 === 3)\\n      m24 = -1;\\n    var u1;\\n    if ((m14 & 1) === 0) {\\n      u1 = 0;\\n    } else {\\n      m8 = (k1.andln(7) + d1) & 7;\\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\\n        u1 = -m14;\\n      else\\n        u1 = m14;\\n    }\\n    jsf[0].push(u1);\\n\\n    var u2;\\n    if ((m24 & 1) === 0) {\\n      u2 = 0;\\n    } else {\\n      m8 = (k2.andln(7) + d2) & 7;\\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\\n        u2 = -m24;\\n      else\\n        u2 = m24;\\n    }\\n    jsf[1].push(u2);\\n\\n    // Second phase\\n    if (2 * d1 === u1 + 1)\\n      d1 = 1 - d1;\\n    if (2 * d2 === u2 + 1)\\n      d2 = 1 - d2;\\n    k1.iushrn(1);\\n    k2.iushrn(1);\\n  }\\n\\n  return jsf;\\n}\\nutils.getJSF = getJSF;\\n\\nfunction cachedProperty(obj, name, computer) {\\n  var key = '_' + name;\\n  obj.prototype[name] = function cachedProperty() {\\n    return this[key] !== undefined ? this[key] :\\n      this[key] = computer.call(this);\\n  };\\n}\\nutils.cachedProperty = cachedProperty;\\n\\nfunction parseBytes(bytes) {\\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\\n    bytes;\\n}\\nutils.parseBytes = parseBytes;\\n\\nfunction intFromLE(bytes) {\\n  return new BN(bytes, 'hex', 'le');\\n}\\nutils.intFromLE = intFromLE;\\n\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"BN\",\"minAssert\",\"minUtils\",\"assert\",\"toArray\",\"zero2\",\"toHex\",\"encode\",\"getNAF\",\"num\",\"w\",\"bits\",\"naf\",\"Array\",\"Math\",\"max\",\"bitLength\",\"fill\",\"ws\",\"k\",\"clone\",\"i\",\"length\",\"mod\",\"andln\",\"isOdd\",\"z\",\"isubn\",\"iushrn\",\"getJSF\",\"k1\",\"k2\",\"jsf\",\"d1\",\"d2\",\"m8\",\"cmpn\",\"m14\",\"m24\",\"u1\",\"push\",\"u2\",\"cachedProperty\",\"obj\",\"name\",\"computer\",\"key\",\"prototype\",\"undefined\",\"call\",\"parseBytes\",\"bytes\",\"intFromLE\"]\n}\n"]