["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/material/node/styles/responsiveFontSizes.js"],"~:js","shadow$provide.module$node_modules$$mui$material$node$styles$responsiveFontSizes=function(global,process,require,module,exports,shadow$shims){global=require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(themeInput,options){var $jscomp$destructuring$var277=options=void 0===options?{}:options;options=void 0===$jscomp$destructuring$var277.breakpoints?[\"sm\",\"md\",\"lg\"]:$jscomp$destructuring$var277.breakpoints;\nvar disableAlign=void 0===$jscomp$destructuring$var277.disableAlign?!1:$jscomp$destructuring$var277.disableAlign,factor=void 0===$jscomp$destructuring$var277.factor?2:$jscomp$destructuring$var277.factor;$jscomp$destructuring$var277=void 0===$jscomp$destructuring$var277.variants?\"h1 h2 h3 h4 h5 h6 subtitle1 subtitle2 body1 body2 caption button overline\".split(\" \"):$jscomp$destructuring$var277.variants;var theme=(0,_extends2.default)({},themeInput);theme.typography=(0,_extends2.default)({},theme.typography);\nvar typography=theme.typography,convert=(0,_cssUtils.convertLength)(typography.htmlFontSize),breakpointValues=options.map(function(x){return theme.breakpoints.values[x]});$jscomp$destructuring$var277.forEach(function(variant){var style=typography[variant],remFontSize=parseFloat(convert(style.fontSize,\"rem\"));if(!(1>=remFontSize)){var minFontSize=1+(remFontSize-1)/factor,lineHeight=style.lineHeight;if(!(0,_cssUtils.isUnitless)(lineHeight)&&!disableAlign)throw Error(\"MUI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\");\n(0,_cssUtils.isUnitless)(lineHeight)||(lineHeight=parseFloat(convert(lineHeight,\"rem\"))/parseFloat(remFontSize));var transform=null;disableAlign||(transform=function(value){return(0,_cssUtils.alignProperty)({size:value,grid:(0,_cssUtils.fontGrid)({pixels:4,lineHeight:lineHeight,htmlFontSize:typography.htmlFontSize})})});typography[variant]=(0,_extends2.default)({},style,(0,_cssUtils.responsiveProperty)({cssProperty:\"fontSize\",min:minFontSize,max:remFontSize,unit:\"rem\",breakpoints:breakpointValues,\ntransform:transform}))}});return theme};var _extends2=global(require(\"module$node_modules$$babel$runtime$helpers$extends\"));require(\"module$node_modules$$mui$utils$index\");var _cssUtils=require(\"module$node_modules$$mui$material$node$styles$cssUtils\")}","~:source","shadow$provide[\"module$node_modules$$mui$material$node$styles$responsiveFontSizes\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _cssUtils = require(\"./cssUtils\");\n\nfunction responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n  const theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  const typography = theme.typography; // Convert between CSS lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : (0, _utils.formatMuiErrorMessage)(6));\n    }\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = value => (0, _cssUtils.alignProperty)({\n        size: value,\n        grid: (0, _cssUtils.fontGrid)({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$mui$utils$index","~$module$node_modules$$mui$material$node$styles$cssUtils","~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$shadow.js","~$module$node_modules$$babel$runtime$helpers$extends"]],"~:properties",["^5",["min","grid","breakpoints","lineHeight","__esModule","max","transform","cssProperty","pixels","value","typography","htmlFontSize","unit","size","default"]],"~:compiled-at",1643014033913,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$material$node$styles$responsiveFontSizes.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@mui/material/node/styles/responsiveFontSizes.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$material$node$styles$responsiveFontSizes\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = responsiveFontSizes;\\n\\nvar _extends2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/extends\\\"));\\n\\nvar _utils = require(\\\"@mui/utils\\\");\\n\\nvar _cssUtils = require(\\\"./cssUtils\\\");\\n\\nfunction responsiveFontSizes(themeInput, options = {}) {\\n  const {\\n    breakpoints = ['sm', 'md', 'lg'],\\n    disableAlign = false,\\n    factor = 2,\\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\\n  } = options;\\n  const theme = (0, _extends2.default)({}, themeInput);\\n  theme.typography = (0, _extends2.default)({}, theme.typography);\\n  const typography = theme.typography; // Convert between CSS lengths e.g. em->px or px->rem\\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\\n\\n  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\\n  variants.forEach(variant => {\\n    const style = typography[variant];\\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\\n\\n    if (remFontSize <= 1) {\\n      return;\\n    }\\n\\n    const maxFontSize = remFontSize;\\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\\n    let {\\n      lineHeight\\n    } = style;\\n\\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\\n      throw new Error(process.env.NODE_ENV !== \\\"production\\\" ? `MUI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.` : (0, _utils.formatMuiErrorMessage)(6));\\n    }\\n\\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\\n      // make it unitless\\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\\n    }\\n\\n    let transform = null;\\n\\n    if (!disableAlign) {\\n      transform = value => (0, _cssUtils.alignProperty)({\\n        size: value,\\n        grid: (0, _cssUtils.fontGrid)({\\n          pixels: 4,\\n          lineHeight,\\n          htmlFontSize: typography.htmlFontSize\\n        })\\n      });\\n    }\\n\\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\\n      cssProperty: 'fontSize',\\n      min: minFontSize,\\n      max: maxFontSize,\\n      unit: 'rem',\\n      breakpoints: breakpointValues,\\n      transform\\n    }));\\n  });\\n  return theme;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"default\",\"responsiveFontSizes\",\"themeInput\",\"options\",\"breakpoints\",\"disableAlign\",\"factor\",\"variants\",\"theme\",\"_extends2\",\"typography\",\"convert\",\"_cssUtils\",\"convertLength\",\"htmlFontSize\",\"breakpointValues\",\"map\",\"x\",\"values\",\"forEach\",\"variant\",\"style\",\"remFontSize\",\"parseFloat\",\"fontSize\",\"minFontSize\",\"lineHeight\",\"isUnitless\",\"Error\",\"transform\",\"alignProperty\",\"size\",\"grid\",\"fontGrid\",\"pixels\",\"responsiveProperty\",\"cssProperty\",\"min\",\"max\",\"unit\"]\n}\n"]