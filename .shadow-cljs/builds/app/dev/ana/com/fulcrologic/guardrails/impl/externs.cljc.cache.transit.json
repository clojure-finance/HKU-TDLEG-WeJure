["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.guardrails.impl.externs');\ngoog.require('cljs.core');\ngoog.require('com.fulcrologic.guardrails.registry');\ngoog.require('com.fulcrologic.guardrails.utils');\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.guardrails !== 'undefined') && (typeof com.fulcrologic.guardrails.impl !== 'undefined') && (typeof com.fulcrologic.guardrails.impl.externs !== 'undefined') && (typeof com.fulcrologic.guardrails.impl.externs.externs_registry !== 'undefined')){\n} else {\ncom.fulcrologic.guardrails.impl.externs.externs_registry = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.guardrails !== 'undefined') && (typeof com.fulcrologic.guardrails.impl !== 'undefined') && (typeof com.fulcrologic.guardrails.impl.externs !== 'undefined') && (typeof com.fulcrologic.guardrails.impl.externs.spec_registry !== 'undefined')){\n} else {\ncom.fulcrologic.guardrails.impl.externs.spec_registry = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.guardrails !== 'undefined') && (typeof com.fulcrologic.guardrails.impl !== 'undefined') && (typeof com.fulcrologic.guardrails.impl.externs !== 'undefined') && (typeof com.fulcrologic.guardrails.impl.externs.function_registry !== 'undefined')){\n} else {\ncom.fulcrologic.guardrails.impl.externs.function_registry = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.guardrails !== 'undefined') && (typeof com.fulcrologic.guardrails.impl !== 'undefined') && (typeof com.fulcrologic.guardrails.impl.externs !== 'undefined') && (typeof com.fulcrologic.guardrails.impl.externs.external_function_registry !== 'undefined')){\n} else {\ncom.fulcrologic.guardrails.impl.externs.external_function_registry = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\ncom.fulcrologic.guardrails.impl.externs.register_externs_BANG_ = (function com$fulcrologic$guardrails$impl$externs$register_externs_BANG_(NS,fn_name,externs){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.guardrails.impl.externs.externs_registry,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [NS,fn_name], null),externs);\n});\ncom.fulcrologic.guardrails.impl.externs.register_specs_BANG_ = (function com$fulcrologic$guardrails$impl$externs$register_specs_BANG_(function$){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.guardrails.impl.externs.spec_registry,cljs.core.merge,new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"spec-registry\",\"com.fulcrologic.guardrails.registry/spec-registry\",1477479211).cljs$core$IFn$_invoke$arity$1(function$));\n});\ncom.fulcrologic.guardrails.impl.externs.clean_function = (function com$fulcrologic$guardrails$impl$externs$clean_function(function$){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.update.cljs$core$IFn$_invoke$arity$3(function$,new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"arities\",\"com.fulcrologic.guardrails.registry/arities\",1446074922),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.guardrails.utils.map_vals,(function (p1__20318_SHARP_){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(p1__20318_SHARP_,new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"body\",\"com.fulcrologic.guardrails.registry/body\",1170523854));\n}))),new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"spec-registry\",\"com.fulcrologic.guardrails.registry/spec-registry\",1477479211));\n});\ncom.fulcrologic.guardrails.impl.externs.register_function_BANG_ = (function com$fulcrologic$guardrails$impl$externs$register_function_BANG_(NS,fn_name,function$){\ncom.fulcrologic.guardrails.impl.externs.register_specs_BANG_(function$);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.guardrails.impl.externs.function_registry,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [NS,fn_name], null),com.fulcrologic.guardrails.impl.externs.clean_function(function$));\n});\ncom.fulcrologic.guardrails.impl.externs.record_defn_BANG_ = (function com$fulcrologic$guardrails$impl$externs$record_defn_BANG_(NS,p__20330,externs){\nvar map__20331 = p__20330;\nvar map__20331__$1 = (((((!((map__20331 == null))))?(((((map__20331.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20331.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20331):map__20331);\nvar function$ = map__20331__$1;\nvar fn_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20331__$1,new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"fn-name\",\"com.fulcrologic.guardrails.registry/fn-name\",-1837692103));\ncom.fulcrologic.guardrails.impl.externs.register_externs_BANG_(NS,fn_name,externs);\n\nreturn com.fulcrologic.guardrails.impl.externs.register_function_BANG_(NS,fn_name,function$);\n});\ncom.fulcrologic.guardrails.impl.externs.register_external_function_BANG_ = (function com$fulcrologic$guardrails$impl$externs$register_external_function_BANG_(p__20337){\nvar map__20338 = p__20337;\nvar map__20338__$1 = (((((!((map__20338 == null))))?(((((map__20338.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20338.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20338):map__20338);\nvar external_function = map__20338__$1;\nvar var_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20338__$1,new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"var-name\",\"com.fulcrologic.guardrails.registry/var-name\",502701799));\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.guardrails.impl.externs.external_function_registry,cljs.core.assoc,var_name,com.fulcrologic.guardrails.impl.externs.clean_function(external_function));\n});\ncom.fulcrologic.guardrails.impl.externs.record_fdef_BANG_ = (function com$fulcrologic$guardrails$impl$externs$record_fdef_BANG_(external_function){\ncom.fulcrologic.guardrails.impl.externs.register_specs_BANG_(external_function);\n\nreturn com.fulcrologic.guardrails.impl.externs.register_external_function_BANG_(external_function);\n});\n/**\n * Returns the information known about the given qualified symbol (if it was declared with >defn in\n *   copilot mode, or has register a gspec on an external function) .\n */\ncom.fulcrologic.guardrails.impl.externs.function_info = (function com$fulcrologic$guardrails$impl$externs$function_info(qualified_symbol){\nvar spc = cljs.core.namespace(qualified_symbol);\nvar simple_name = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.name(qualified_symbol));\nvar or__4131__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(com.fulcrologic.guardrails.impl.externs.external_function_registry),qualified_symbol);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(com.fulcrologic.guardrails.impl.externs.function_registry),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [spc,simple_name], null));\n}\n});\n/**\n * Returns true if the given fully-qualified symbol was declared with >defn and the arity (which is a number\n * or :n) is marked as pure.\n */\ncom.fulcrologic.guardrails.impl.externs.pure_QMARK_ = (function com$fulcrologic$guardrails$impl$externs$pure_QMARK_(qualified_symbol,arity){\nreturn cljs.core.boolean$((function (){var info = com.fulcrologic.guardrails.impl.externs.function_info(qualified_symbol);\nvar has_arity_QMARK_ = cljs.core.boolean$(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(info,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"arities\",\"com.fulcrologic.guardrails.registry/arities\",1446074922),arity], null)));\nvar map__20359 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(info,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"arities\",\"com.fulcrologic.guardrails.registry/arities\",1446074922),((has_arity_QMARK_)?arity:new cljs.core.Keyword(null,\"n\",\"n\",562130025)),new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"gspec\",\"com.fulcrologic.guardrails.registry/gspec\",207045467),new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"metadata\",\"com.fulcrologic.guardrails.registry/metadata\",-1389979282)], null));\nvar map__20359__$1 = (((((!((map__20359 == null))))?(((((map__20359.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20359.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20359):map__20359);\nvar pure = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20359__$1,new cljs.core.Keyword(null,\"pure\",\"pure\",1433370394));\nvar pure_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20359__$1,new cljs.core.Keyword(null,\"pure?\",\"pure?\",350862691));\nvar or__4131__auto__ = pure;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn pure_QMARK_;\n}\n})());\n});\n/**\n * Returns the function spec system that was used in the type signature of the given symbol, or nil if that\n * function isn't registered with guardrails.\n */\ncom.fulcrologic.guardrails.impl.externs.spec_system = (function com$fulcrologic$guardrails$impl$externs$spec_system(qualified_symbol){\nvar map__20361 = com.fulcrologic.guardrails.impl.externs.function_info(qualified_symbol);\nvar map__20361__$1 = (((((!((map__20361 == null))))?(((((map__20361.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__20361.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__20361):map__20361);\nvar info = map__20361__$1;\nvar spec_system = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20361__$1,new cljs.core.Keyword(\"com.fulcrologic.guardrails.registry\",\"spec-system\",\"com.fulcrologic.guardrails.registry/spec-system\",-484591590));\nif(cljs.core.truth_(info)){\nvar or__4131__auto__ = spec_system;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(\"org.clojure\",\"spec1\",\"org.clojure/spec1\",-2090493001);\n}\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/guardrails/impl/externs.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",44],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.core.async","~$cljs.core.async","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.guardrails.impl.externs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$com.fulcrologic.guardrails.registry","^S","~$gr.reg","^S","~$com.fulcrologic.guardrails.utils","^U","~$utils","^U","~$cljs.core","^W","~$goog","^X"],"~:seen",["^L",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^W","^W","^U","^U","^V","^U"],"~:form",["~#list",["~$ns","^N",["^12",["^Z",["^S","~:as","^T"],["^U","^14","^V"]]]]],"~:flags",["^ ","^Z",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^S","^U"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/guardrails/impl/externs.cljc"],"~:compiled-at",1643209622084,"~:resource-name","com/fulcrologic/guardrails/impl/externs.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.guardrails.impl.externs\n  (:require\n    #?@(:clj [[clojure.walk :as walk]])\n    [com.fulcrologic.guardrails.registry :as gr.reg]\n    [com.fulcrologic.guardrails.utils :as utils]))\n\n(defonce externs-registry (atom {}))\n(defonce spec-registry (atom {}))\n(defonce function-registry (atom {}))\n(defonce external-function-registry (atom {}))\n\n#?(:clj (try (require 'cljs.analyzer.api) (catch Exception _)))\n\n#?(:clj\n   (defn compiling-cljs? [env]\n     (and (:ns env) (utils/compiling-cljs?))))\n\n#?(:clj\n   (defn cljc-resolve [env s]\n     (letfn [(cljs-resolve []\n               (let [rslv     (some-> (find-ns 'cljs.analyzer.api) (ns-resolve 'resolve))\n                     ast-node (when rslv (rslv env s))\n                     macro?   (boolean (:macro ast-node))]\n                 (when ast-node\n                   (cond-> {::gr.reg/extern-name `(quote ~(:name ast-node))\n                            ::gr.reg/macro?      macro?}\n                     (not macro?) (assoc ::gr.reg/extern-value s)))))\n             (clojure-resolve []\n               (if (contains? env s)\n                 {::gr.reg/extern-name  `(quote ~s)\n                  ::gr.reg/extern-value s}\n                 (let [sym-var (ns-resolve *ns* env s)\n                       cls?    (class? sym-var)\n                       macro?  (boolean (some-> sym-var meta :macro))]\n                   (when (and sym-var (not cls?))\n                     (cond-> {::gr.reg/extern-name `(quote ~(symbol sym-var))\n                              ::gr.reg/macro?      macro?}\n                       (not macro?)\n                       (assoc ::gr.reg/extern-value (symbol sym-var)))))))]\n       (if (compiling-cljs? env)\n         (cljs-resolve)\n         (clojure-resolve)))))\n\n#?(:clj\n   (defn extern-symbols [env body]\n     (let [externs (atom {})\n           record! (fn [x]\n                     (when (symbol? x)\n                       (when-let [extern (cljc-resolve env x)]\n                         (swap! externs assoc `(quote ~x) extern)))\n                     x)]\n       (walk/postwalk record! body)\n       @externs)))\n\n(defn register-externs! [NS fn-name externs]\n  (swap! externs-registry assoc-in [NS fn-name] externs))\n\n(defn register-specs! [function]\n  (swap! spec-registry merge (::gr.reg/spec-registry function)))\n\n(defn clean-function [function]\n  (-> function\n    (update ::gr.reg/arities\n      (partial utils/map-vals #(dissoc % ::gr.reg/body)))\n    (dissoc ::gr.reg/spec-registry)))\n\n(defn register-function! [NS fn-name function]\n  (register-specs! function)\n  (swap! function-registry assoc-in [NS fn-name]\n    (clean-function function)))\n\n(defn record-defn! [NS {:as function ::gr.reg/keys [fn-name]} externs]\n  (register-externs! NS fn-name externs)\n  (register-function! NS fn-name function))\n\n(defn register-external-function! [{:as external-function ::gr.reg/keys [var-name]}]\n  (swap! external-function-registry assoc var-name\n    (clean-function external-function)))\n\n(defn record-fdef! [external-function]\n  (register-specs! external-function)\n  (register-external-function! external-function))\n\n(defn function-info\n  \"Returns the information known about the given qualified symbol (if it was declared with >defn in\n  copilot mode, or has register a gspec on an external function) .\"\n  [qualified-symbol]\n  (let [spc         (namespace qualified-symbol)\n        simple-name (symbol (name qualified-symbol))]\n    (or\n      (get @external-function-registry qualified-symbol)\n      (get-in @function-registry [spc simple-name]))))\n\n(defn pure?\n  \"Returns true if the given fully-qualified symbol was declared with >defn and the arity (which is a number\n   or :n) is marked as pure.\"\n  [qualified-symbol arity]\n  (boolean\n    (let [info       (function-info qualified-symbol)\n          has-arity? (boolean (get-in info [::gr.reg/arities arity]))\n          {:keys [pure pure?]} (get-in info [::gr.reg/arities (if has-arity? arity :n) ::gr.reg/gspec ::gr.reg/metadata])]\n      (or pure pure?))))\n\n(defn spec-system\n  \"Returns the function spec system that was used in the type signature of the given symbol, or nil if that\n   function isn't registered with guardrails.\"\n  [qualified-symbol]\n  (let [{::gr.reg/keys [spec-system] :as info} (function-info qualified-symbol)]\n    (when info\n      (or spec-system :org.clojure/spec1))))\n\n#?(:clj\n   (defn run-registry-function\n     \"Run the given function defined by the qualified-symbol if and only if that arity of the function is pure.\n\n      qualified-symbol - The symbol of the function\n      args - a vector of arguments to pass to it.\n\n      Throws IllegalArgumentException if that function arity is not marked pure.\"\n     [qualified-symbol args]\n     (if (pure? qualified-symbol (count args))\n       (let [{::gr.reg/keys [fn-ref]} (function-info qualified-symbol)]\n         (apply fn-ref args))\n       (throw (IllegalArgumentException. (str qualified-symbol \" is not a pure function.\"))))))","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/com","js/com.fulcrologic","js/com.fulcrologic.guardrails","js/com.fulcrologic.guardrails.impl","js/com.fulcrologic.guardrails.impl.externs","js/com.fulcrologic.guardrails.impl.externs.externs-registry","com.fulcrologic.guardrails.impl.externs/externs-registry","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/com.fulcrologic.guardrails.impl.externs.spec-registry","com.fulcrologic.guardrails.impl.externs/spec-registry","js/com.fulcrologic.guardrails.impl.externs.function-registry","com.fulcrologic.guardrails.impl.externs/function-registry","js/com.fulcrologic.guardrails.impl.externs.external-function-registry","com.fulcrologic.guardrails.impl.externs/external-function-registry","com.fulcrologic.guardrails.impl.externs/register-externs!","NS","fn-name","externs","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","com.fulcrologic.guardrails.impl.externs/register-specs!","function","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","com.fulcrologic.guardrails.impl.externs/clean-function","cljs.core.update.cljs$core$IFn$_invoke$arity$3","p1__20318#","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.guardrails.utils/map-vals","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.guardrails.impl.externs/register-function!","p__20330","map__20331","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.guardrails.impl.externs/record-defn!","p__20337","map__20338","com.fulcrologic.guardrails.impl.externs/register-external-function!","external-function","var-name","cljs.core/assoc","com.fulcrologic.guardrails.impl.externs/record-fdef!","com.fulcrologic.guardrails.impl.externs/function-info","qualified-symbol","spc","cljs.core/namespace","simple-name","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/name","or__4131__auto__","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.guardrails.impl.externs/pure?","arity","cljs.core/boolean","map__20359","info","has-arity?","pure","pure?","com.fulcrologic.guardrails.impl.externs/spec-system","map__20361","spec-system"]]],"~:cache-keys",["~#cmap",[["~:macro","^W"],[1642419849000],["^19","goog/math/math.js"],[1641560885521,"^X","~$goog.array","~$goog.asserts"],["^19","goog/array/array.js"],[1641560885521,"^X","^1H"],["^19","goog/debug/error.js"],[1641560885521,"^X"],["^19","goog/dom/nodetype.js"],[1641560885521,"^X"],["^19","com/fulcrologic/guardrails/utils.cljc"],[1643209583674,"^X","^W","~$clojure.walk"],["^19","goog/object/object.js"],[1641560885521,"^X"],"~:SHADOW-TIMESTAMP",[1642419855000,1642419849000],["^19","goog/math/long.js"],[1641560885521,"^X","^1H","~$goog.reflect"],["^19","com/fulcrologic/guardrails/registry.cljc"],[1643209583674,"^X","^W"],["^19","goog/functions/functions.js"],[1641560885521,"^X"],["^19","clojure/walk.cljs"],[1642419849260,"^X","^W"],["^19","goog/structs/map.js"],[1641560885521,"^X","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^19","com/fulcrologic/guardrails/impl/externs.cljc"],[1643209583674,"^X","^W","^S","^U"],["^19","goog/asserts/asserts.js"],[1641560885521,"^X","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^19","goog/uri/uri.js"],[1641560885521,"^X","^1G","^1H","^1Q","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^19","goog/base.js"],[1641560885521],["^19","goog/structs/structs.js"],[1641560885521,"^X","^1G","^1N"],["^19","goog/string/string.js"],[1641560885521,"^X"],["^1F","^U"],[1643209583000],["^19","goog/reflect/reflect.js"],[1641560885521,"^X"],["^19","goog/string/stringbuffer.js"],[1641560885521,"^X"],["^19","goog/iter/iter.js"],[1641560885521,"^X","^1G","^1H","~$goog.functions","~$goog.math"],["^19","cljs/core.cljs"],[1642419849260,"~$goog.math.Long","~$goog.math.Integer","^1Q","^1N","^1G","~$goog.Uri","~$goog.string.StringBuffer"],["^19","goog/math/integer.js"],[1641560885521,"^X"],["^19","goog/uri/utils.js"],[1641560885521,"^X","^1G","^1H","^1Q"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",1,"^8",5,"^9",1,"^:",44],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^S","^U","^U","^V","^U","^W","^W","^X","^X"],"^Y",["^L",["^Z"]],"^[",null,"~:defs",["^ ","~$register-specs!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",58,"^8",7,"^9",58,"^:",22,"~:arglists",["^12",["~$quote",["^12",[["~$function"]]]]]],"^M","~$com.fulcrologic.guardrails.impl.externs/register-specs!","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",22,"~:method-params",["^12",[["^27"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^8",1,"~:variadic?",false,"^7",58,"~:ret-tag",["^L",[null,"~$any"]],"^9",58,"~:max-fixed-arity",1,"~:fn-var",true,"^25",["^12",["^26",["^12",[["^27"]]]]]],"~$register-function!",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",67,"^8",7,"^9",67,"^:",25,"^25",["^12",["^26",["^12",[["~$NS","~$fn-name","^27"]]]]]],"^M","~$com.fulcrologic.guardrails.impl.externs/register-function!","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",25,"^29",["^12",[["^2B","^2C","^27"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",67,"^2=",["^L",[null,"^2>"]],"^9",67,"^2?",3,"^2@",true,"^25",["^12",["^26",["^12",[["^2B","^2C","^27"]]]]]],"~$function-info",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",84,"^8",7,"^9",84,"^:",20,"^25",["^12",["^26",["^12",[["~$qualified-symbol"]]]]],"~:doc","Returns the information known about the given qualified symbol (if it was declared with >defn in\n  copilot mode, or has register a gspec on an external function) ."],"^M","~$com.fulcrologic.guardrails.impl.externs/function-info","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",20,"^29",["^12",[["^2F"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",84,"^2=",["^L",[null,"^2>"]],"^9",84,"^2?",1,"^2@",true,"^25",["^12",["^26",["^12",[["^2F"]]]]],"^2G","Returns the information known about the given qualified symbol (if it was declared with >defn in\n  copilot mode, or has register a gspec on an external function) ."],"~$spec-registry",["^ ","^M","~$com.fulcrologic.guardrails.impl.externs/spec-registry","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",8,"^8",1,"^9",8,"^:",23,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",8,"^8",10,"^9",8,"^:",23],"~:tag","~$cljs.core/Atom"],"~$clean-function",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",61,"^8",7,"^9",61,"^:",21,"^25",["^12",["^26",["^12",[["^27"]]]]]],"^M","~$com.fulcrologic.guardrails.impl.externs/clean-function","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",21,"^29",["^12",[["^27"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",61,"^2=",["^L",["~$clj","~$clj-nil"]],"^9",61,"^2?",1,"^2@",true,"^25",["^12",["^26",["^12",[["^27"]]]]]],"~$pure?",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",94,"^8",7,"^9",94,"^:",12,"^25",["^12",["^26",["^12",[["^2F","~$arity"]]]]],"^2G","Returns true if the given fully-qualified symbol was declared with >defn and the arity (which is a number\n   or :n) is marked as pure."],"^M","~$com.fulcrologic.guardrails.impl.externs/pure?","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",12,"^29",["^12",[["^2F","^2R"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",94,"^2=","~$boolean","^9",94,"^2?",2,"^2@",true,"^25",["^12",["^26",["^12",[["^2F","^2R"]]]]],"^2G","Returns true if the given fully-qualified symbol was declared with >defn and the arity (which is a number\n   or :n) is marked as pure."],"~$spec-system",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",104,"^8",7,"^9",104,"^:",18,"^25",["^12",["^26",["^12",[["^2F"]]]]],"^2G","Returns the function spec system that was used in the type signature of the given symbol, or nil if that\n   function isn't registered with guardrails."],"^M","~$com.fulcrologic.guardrails.impl.externs/spec-system","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",18,"^29",["^12",[["^2F"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",104,"^2=",["^L",["^2>","~$cljs.core/Keyword","^2P"]],"^9",104,"^2?",1,"^2@",true,"^25",["^12",["^26",["^12",[["^2F"]]]]],"^2G","Returns the function spec system that was used in the type signature of the given symbol, or nil if that\n   function isn't registered with guardrails."],"~$register-external-function!",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",76,"^8",7,"^9",76,"^:",34,"^25",["^12",["^26",["^12",[[["^ ","^14","~$external-function","~:com.fulcrologic.guardrails.registry/keys",["~$var-name"]]]]]]]],"^M","~$com.fulcrologic.guardrails.impl.externs/register-external-function!","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",34,"^29",["^12",[["~$p__20337"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",76,"^2=",["^L",[null,"^2>"]],"^9",76,"^2?",1,"^2@",true,"^25",["^12",["^26",["^12",[[["^ ","^14","^2Y","^2Z",["^2["]]]]]]]],"~$externs-registry",["^ ","^M","~$com.fulcrologic.guardrails.impl.externs/externs-registry","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",7,"^8",1,"^9",7,"^:",26,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",7,"^8",10,"^9",7,"^:",26],"^2K","^2L"],"~$function-registry",["^ ","^M","~$com.fulcrologic.guardrails.impl.externs/function-registry","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",9,"^8",1,"^9",9,"^:",27,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",9,"^8",10,"^9",9,"^:",27],"^2K","^2L"],"~$record-defn!",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",72,"^8",7,"^9",72,"^:",19,"^25",["^12",["^26",["^12",[["^2B",["^ ","^14","^27","^2Z",["^2C"]],"~$externs"]]]]]],"^M","~$com.fulcrologic.guardrails.impl.externs/record-defn!","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",19,"^29",["^12",[["^2B","~$p__20330","^37"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",72,"^2=",["^L",[null,"^2>"]],"^9",72,"^2?",3,"^2@",true,"^25",["^12",["^26",["^12",[["^2B",["^ ","^14","^27","^2Z",["^2C"]],"^37"]]]]]],"~$external-function-registry",["^ ","^M","~$com.fulcrologic.guardrails.impl.externs/external-function-registry","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",10,"^8",1,"^9",10,"^:",36,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",10,"^8",10,"^9",10,"^:",36],"^2K","^2L"],"~$record-fdef!",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",80,"^8",7,"^9",80,"^:",19,"^25",["^12",["^26",["^12",[["^2Y"]]]]]],"^M","~$com.fulcrologic.guardrails.impl.externs/record-fdef!","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",19,"^29",["^12",[["^2Y"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",80,"^2=",["^L",[null,"^2>"]],"^9",80,"^2?",1,"^2@",true,"^25",["^12",["^26",["^12",[["^2Y"]]]]]],"~$register-externs!",["^ ","^24",null,"^5",["^ ","^6","com/fulcrologic/guardrails/impl/externs.cljc","^7",55,"^8",7,"^9",55,"^:",24,"^25",["^12",["^26",["^12",[["^2B","^2C","^37"]]]]]],"^M","~$com.fulcrologic.guardrails.impl.externs/register-externs!","^6","com/fulcrologic/guardrails/impl/externs.cljc","^:",24,"^29",["^12",[["^2B","^2C","^37"]]],"^2:",null,"^2;",["^12",[null,null]],"^8",1,"^2<",false,"^7",55,"^2=",["^L",[null,"^2>"]],"^9",55,"^2?",3,"^2@",true,"^25",["^12",["^26",["^12",[["^2B","^2C","^37"]]]]]]],"^10",["^ ","^W","^W","^U","^U","^V","^U"],"~:cljs.analyzer/constants",["^ ","^Y",["^L",["~:pure?","~:com.fulcrologic.guardrails.registry/var-name","~:n","~:com.fulcrologic.guardrails.registry/arities","~:com.fulcrologic.guardrails.registry/spec-registry","~:com.fulcrologic.guardrails.registry/metadata","~:com.fulcrologic.guardrails.registry/body","~:org.clojure/spec1","~:com.fulcrologic.guardrails.registry/fn-name","~:com.fulcrologic.guardrails.registry/spec-system","~:pure","~:com.fulcrologic.guardrails.registry/gspec"]],"~:order",["^3D","^3C","^3F","^3H","^3B","~:n","^3K","^3E","^3J","^3A","^3I","^3G"]],"^15",["^ ","^Z",["^L",[]]],"^16",["^ "],"^17",["^X","^W","^S","^U"]],"^P","^N","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1E",[["^3O","~:static-fns"],true,["^3O","~:elide-asserts"],false,["^3O","~:optimize-constants"],null,["^3O","^1<"],null,["^3O","~:external-config"],null,["^3O","~:tooling-config"],null,["^3O","~:emit-constants"],null,["^3O","~:load-tests"],null,["^3O","~:infer-externs"],true,["^3O","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3O","~:fn-invoke-direct"],null,["^3O","~:source-map"],"/dev/null"]]]